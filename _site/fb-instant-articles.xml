<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      Lots of lessons
    </description>
    
        
            <item>
                <title>Digital Signal Processsing using GNURadio - Fourier Analysis and Radio Astronomy</title>
                <link>http://localhost:4000/dsplab-fourier2/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="5-fourier-analysis---expert-mode">5. Fourier Analysis - Expert Mode!</h1>

<p>As we observed in the previous labs and theory with their corresponding exercises, Fourier analysis is a very important tool in Signal Processing.</p>

<!-- TOC -->

<ul>
  <li><a href="#5-fourier-analysis---expert-mode">5. Fourier Analysis - Expert Mode!</a>
    <ul>
      <li><a href="#52-iq-signals-or-what-is-up-with-all-the-complex-numbers">5.1. IQ signals <em>or</em> What is up with all the Complex Numbers</a></li>
      <li><a href="#53-fast-fourier-transforms-fft">5.2. Fast Fourier Transforms (FFT)</a>
        <ul>
          <li><a href="#531-8-point-fast-fourier-transform-optional">5.2.1. 8 Point Fast Fourier Transform <strong>[OPTIONAL]</strong></a></li>
        </ul>
      </li>
      <li><a href="#54-fourier-analysis-in-radio-astronomy-a-spectrometer">5.3. Fourier Analysis in Radio Astronomy: A Spectrometer</a></li>
      <li><a href="#55-the-spectrometers-purpose">5.4. The Spectrometer’s purpose</a></li>
      <li><a href="#56-the-window-field-in-the-gnuradio-fft-block">5.5. The Window Field in the gnuradio FFT block</a></li>
      <li><a href="#57-spectral-leakage--polyphase-filter-bank-pfb">5.6. Spectral Leakage &amp; Polyphase Filter Bank (PFB)</a></li>
      <li><a href="#58-final-upgrade-pfb-spectrometer">5.7. Final Upgrade: PFB Spectrometer</a></li>
      <li><a href="#59-saving-data">5.8. Saving Data</a>
              - <a href="#image-credits">Image Credits</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h2 id="51-iq-signals-or-what-is-up-with-all-the-complex-numbers">5.1. IQ signals <em>or</em> What is up with all the Complex Numbers</h2>

<p>If you remember from the <a href="/dspira-lessons/dsplab-sdr/#21-introduction">lab 2 introduction</a> an SDR dongle passes the incoming signal through a mixer where the receiver sets the frequency you observe by setting the “LO” frequency which is mixed (multiplied) with the incoming signal.  The signal is actually mixed with 2 LO’s, one cosine wave and one sine wave.  This is called quadrature sampling, and is done so that it is possible to distinguish a signal that is some frequency(say 2MHz) below the “LO” frequency, or 2MHz above the LO frequency.  With just a single mixing and one measurement, one just cannot distinguish between a signal at those two frequencies.</p>

<p><img src="images/05/img/iq.png" alt="IQ" />
<a href="#image-credits">Credit</a></p>

<p><a href="/dspira-lessons/iq/">See this jupyter notebook</a> for an introduction to the idea.</p>

<p>Now demonstrate IQ processing in gnuradio.  We can demonstrate this at much lower frequencies as well.  Set the sample-rate to 48kHz.  Create 2 tones(cosine signals), one at 8kHz, one at 12kHz.  Create your LO at 10kHz, one a cosine and one a sine.</p>

<p>Try using the two signals independently, and added together, this is the overall ‘signal’.
Now multiply this signal by the cosine and the sine “LO’s”.  This now will become your IQ signal.  In gnuradio, this is passed into a “float to complex” block,
where the cosine LO mixed signal is the real, and the sine multiplied is the imaginary.  This can then be passed into a sink.</p>

<p>Add different sinks along the way, looking at just the cosine (“I”) or sine (“Q”)
multiplied signals.  With just the single incoming tone, demonstrate that you can in fact recover it after mixing.  Do we need a filter?  Where? Add one if needed.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="52-fast-fourier-transforms-fft">5.2. Fast Fourier Transforms (FFT)</h2>

<p>The Discrete Fourier Transform for N samples is given by:</p>

<script type="math/tex; mode=display">X[k] = \sum_{n=0}^{N-1} x[n] \cdot e^\frac{-2\pi kn}{N}</script>

<p>Evaluating the DFT’s sums directly involves <script type="math/tex">N^2</script> complex multiplications and N(N−1) complex additions, of which <script type="math/tex">O(N)</script> operations can be saved by eliminating trivial operations such as multiplications by 1. Multiplications are particularly expensive computations.</p>

<p>Fast Fourier transform algorithms drastically reduce the computational complexity. The radix-2 Cooley–Tukey algorithm is a widely used FFT algorithm.  In comparison to the traditional DFT it can compute the same result with only <script type="math/tex">\frac{N}{2}log_2(N)</script> complex multiplications (again, ignoring simplifications of multiplications by 1 and similar) and <script type="math/tex">Nlog_2(N)</script> complex additions.</p>

<p><a href="http://en.dsplib.org/content/fft_dec_in_freq.html">Check out this link for a derviation of the Cooley-Tukey Algorithm</a></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="521-8-point-fast-fourier-transform-optional">5.2.1. 8 Point Fast Fourier Transform <strong>[OPTIONAL]</strong></h3>

<p>The DFT implemented through a Cooley-Tukey Decimation in frequency FFT algorithm has the flowgraph shown below.
<img src="images/05/img/fft8p.png" alt="8pfft" /></p>

<p>Use appropriate Constant multiplies and and adders to construct the above in gnuradio ( Where W^{i} = $e^\frac{-2\pi ki}{8})$. Are the outputs the Valid frequency domain results?</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="53-fourier-analysis-in-radio-astronomy-a-spectrometer">5.3. Fourier Analysis in Radio Astronomy: A Spectrometer</h2>

<p>You now have the tools necessary to create the digital signal processing for a Spectrometer for a radio telescope.  A spectrometer:</p>

<ol>
  <li>Separates the incoming radio signal into individual frequency components (breaks it into individual cosine wave amplitudes and phases at each frequency)</li>
  <li>Measures the power in each of the cosine waves.</li>
  <li>Integrates (Averages) to get get a more precise measurement of the power at each frequency.</li>
</ol>

<p>Use GnuRadio to create the signal processing chain to achieve this. Use an osmocom airspy source.  Use an FFT to separate frequency components.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="54-the-spectrometers-purpose">5.4. The Spectrometer’s purpose</h2>

<p>As mentioned above, A spectrometer is used to record and measure the spectral content of signals, such as radio waves received from astronomical sources. Specifically, a spectrometer measures the power spectral density (PSD, measured in units of <script type="math/tex">W Hz^{−1}</script>) of a signal. Analysis of spectral content can reveal details of radio sources, as well as properties of the intervening medium like galactic neutral hydrogen. The Power Spectral Density is given by the Wiener-Kinchin theorem for wide sense stationary signals as:</p>

<p><script type="math/tex">S_{xx}(\nu) = \int^{\infty}_{^-\infty}r_{xx}(\tau) e^{-2\pi i\nu\tau}d\tau</script>
<script type="math/tex">r_{xx}= E[x(t)(x(t-\tau)]</script>
and in the fourier domain
<script type="math/tex">S_{xx}(\nu)=E[|X(\nu)|^2]</script>
E[] stands for the expected value i.e. the mean</p>

<p>There are therefore two distinct classes of spectrometers: 1) ones that approximate <script type="math/tex">S_{xx} (k)</script> by first forming the autocorrelation, then taking a Fourier transform and 2) those that first convert into the frequency domain to form X(k) before evaluating <script type="math/tex">S_{xx} (k)</script>. These are Autocorrelation Spectrometers and  Fourier Transform Filter  banks respectively.</p>

<p><img src="images/05/img/spectro.png" alt="the two spectrometers" />
<a href="#image-credits">Credit</a></p>

<p>The one we made above is a Fourier transform filter bank. A filter bank is simply an array of band-pass filters, designed to split an input signal into multiple components . A spectrometer is referred to as a <em>analysis filterbank</em> where the output of each filter is squared and averaged.</p>

<h2 id="55-the-window-field-in-the-gnuradio-fft-block">5.5. The Window Field in the gnuradio FFT block</h2>

<p>The spectrometer we constructed effectively works as a array of band-pass FIR filters. If you recall FIR filters their design involves something called window-functions designed to optimize the filter response. The Discrete Fourier transform as it were uses the rectangular window function across each frequency channel. The response is non-ideal leading to spectral leakage i.e. the signal showing up in neighboring frequency channels. Below is a Demonstration of DFT leakage - a tone at 5.1MHz, sampled at 128MHz, and Fourier-transformed with 64 points, appears to varying levels in all the output frequency bins.</p>

<p><img src="images/05/img/specleak.png" alt="specleak" />
<a href="#image-credits">Credit</a></p>

<p>This can be improveed by using better windowing functions to properly define the frequency channel. Below are some commonly used windowing functions.</p>

<p><img src="images/05/img/windows.png" alt="windows" />
<a href="#image-credits">Credit</a></p>

<p>Note the frequncy response, the main lobe width and the attenuation of the side lobes determine how well defined are the frequency channels. The figures below illustrate the difference. The second plot shows the window response in some frequency bins, the ones with the higher side-lobes as responses of boxcar windows and the the lower side-lobes are of the hann window.</p>

<p><img src="images/05/img/fftvshann.png" alt="fftvshan" />
<a href="#image-credits">Credit</a>
<img src="images/05/img/nwvsw.png" alt="rectvshann" /></p>

<p>In your spectrometer flowgraph, change the window field in the FFT block and observe how the response of a tone ( a sinusoud signal ) changes for different windows.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="56-spectral-leakage--polyphase-filter-bank-pfb">5.6. Spectral Leakage &amp; Polyphase Filter Bank (PFB)</h2>

<p>Despite the appropriate windowing, spectral leakage persists, moreover there is something called a scalloping loss. Scalloping loss is the loss in energy between frequency bin centers due to the non-flat nature of the single-bin frequency response.</p>

<p>The polyphase filter bank (PFB) technique is a mechanism for alleviating the aforementioned drawbacks of the straightforward DFT. The PFB produces a flat response across the channel and provides excellent suppression of out-of-band signals, as shown below.</p>

<p><img src="images/05/img/pfb.png" alt="pfb" />
<a href="#image-credits">Credit</a></p>

<p>“Instead of taking an N-point transform directly, a block of data of size N x P = M is read, and multiplied point-by-point with a window function (in other words, the data is ‘weighted’). As mentioned before, the shape of the window function determines the shape of the single-bin frequency response. Since we wish the single-bin frequency response to resemble a rectangular function as much as possible, we choose its Fourier Transform pair, the sinc function, as our window function. Once the multiplication is done, the block of data is split into P subsets of length N each, and added point-by-point. This array is then passed to a regular DFT routine to get an N-point transform that exhibits less leakage. This method is presented graphically below”<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p><img src="images/05/img/pfb_chart.png" alt="pfb" />
<a href="#image-credits">Credit</a></p>

<p>The same process, mathematically:</p>

<p><script type="math/tex">y(n) = \sum_{p=0}^{P-1} x(n + pN) h(n+pN)</script>
Where, where the sub-filter coefficients <script type="math/tex">h(n + pN)</script> correspond to what are called P-tap ‘polyphase sub-filters’. The N such polyphase sub-filters that make up this operation, together with the following DFT stage, are collectively called a ‘polyphase filter bank’ (‘PFB’). A realization of this filter bank is shown below:</p>

<p><img src="images/05/img/pfbrealized.png" alt="pfbrealized" /></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="57-final-upgrade-pfb-spectrometer">5.7. Final Upgrade: PFB Spectrometer</h2>

<p>Add the polyphase filters to your spectrometer just before taking the FFT. Refer to the diagram above, the dotted squares are simply band-pass FIR filters. Use a hann/hamming window.</p>

<p>The ployphase filter can be realized by implementing following flowgraph:</p>

<p><img src="images/05/img/grcpfb1.png" alt="pfb" /></p>

<p>The <code class="highlighter-rouge">constant muliplier</code> blocks are sections of the filter window as seen the diagram detailing the process above. The filter window is designed by using import block to import <code class="highlighter-rouge">numpy</code> and assigning three constant variables as:</p>

<ul>
  <li>sinc_sample_locations
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="o">/</span><span class="n">vec_length</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>sinc
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">sinc</span><span class="p">(</span><span class="n">sinc_sample_locations</span><span class="o">/</span><span class="n">np</span><span class="p">.</span><span class="n">pi</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>custom_window
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sinc</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">hamming</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">vec_length</span><span class="p">)</span>
</code></pre></div>    </div>
    <p>Now <code class="highlighter-rouge">custom_window</code> are all the window co-efficients/taps you need to do the multiplications, your vector length samples at a time. The constants in the constant  multiplier blocks from the top to bottom are as follows:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">custom_window</span><span class="p">[</span><span class="o">-</span><span class="n">vec_length</span><span class="p">:]</span>
<span class="n">custom_window</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">vec_length</span><span class="p">:</span><span class="mi">3</span><span class="o">*</span><span class="n">vec_length</span><span class="p">]</span>
<span class="n">custom_window</span><span class="p">[</span><span class="n">vec_length</span><span class="p">:</span><span class="mi">2</span><span class="o">*</span><span class="n">vec_length</span><span class="p">]</span>
<span class="n">custom_window</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">vec_length</span><span class="p">]</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="58-saving-data">5.8. Saving Data</h2>

<p>Save the spectrometer data for science! (Use File Sink)</p>

<p><strong>NOTE: Our Low Noise Amplifier (LNA) needs to be powered to actually work. We can configure the airspy dongle by settign bias=1 in the device arguments field of the osmocom source block such as:</strong></p>

<p><img src="images/05/img/grcpfb2.png" alt="airspy bias" /></p>

<h6 id="image-credits">Image Credits</h6>

<ol>
  <li>The windows, the two types of spectrometers,fft vs hann resposnse <a href="https://arxiv.org/pdf/1607.03579.pdf">https://arxiv.org/pdf/1607.03579.pdf</a></li>
  <li>The PFB flowgraph, spectral leakage demo, <a href="https://casper.berkeley.edu/wiki/The_Polyphase_Filter_Bank_Technique">https://casper.berkeley.edu/wiki/The_Polyphase_Filter_Bank_Technique</a></li>
  <li>IQ diagram <a href="https://www.dsprelated.com/showarticle/192.php">https://www.dsprelated.com/showarticle/192.php</a></li>
</ol>

<p><a href="#">↑ Go to the Top of the Page</a></p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="https://casper.berkeley.edu/wiki/The_Polyphase_Filter_Bank_Technique">https://casper.berkeley.edu/wiki/The_Polyphase_Filter_Bank_Technique</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsplab-fourier2/</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of labs using GNURadio
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Digital Signal Processsing using GNURadio - Digital Filter</title>
                <link>http://localhost:4000/dsplab-filters/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="4-digital-filters">4. Digital Filters</h1>

<p>A filter changes the nature of the signal. A digital filter does so by manipulating a discretized signal.</p>

<!-- TOC -->

<ul>
  <li><a href="#4-digital-filters">4. Digital Filters</a>
    <ul>
      <li><a href="#41-introduction">4.1. Introduction</a>
        <ul>
          <li><a href="#411-filter-terminology">4.1.1. Filter Terminology</a></li>
        </ul>
      </li>
      <li><a href="#42-moving-average-filter">4.2. Moving Average Filter</a>
        <ul>
          <li><a href="#421-exercise-1-noise-reduction">4.2.1. Exercise 1: Noise Reduction</a></li>
        </ul>
      </li>
      <li><a href="#43-fir-finite-impulse-response-filters">4.3. FIR: Finite Impulse Response Filters</a>
        <ul>
          <li><a href="#431-exercise-2-extracting-fundamental-frequencies-from-a-guitarpiano-chord-c-major">4.3.1. Exercise 2: Extracting Fundamental Frequencies from a Guitar/Piano Chord (C Major)</a></li>
          <li><a href="#432-exercise-3-digital-audio-equalizer">4.3.2. Exercise 3: Digital Audio Equalizer</a></li>
          <li><a href="#433-exercise-4-guitar-tuner">4.3.3. Exercise 4: Guitar Tuner</a></li>
        </ul>
      </li>
      <li><a href="#44-iir-infinite-impulse-response-filters">4.4. IIR: Infinite Impulse Response Filters</a>
        <ul>
          <li><a href="#441-classic-analog-filters">4.4.1. Classic Analog Filters</a></li>
          <li><a href="#442-iir-filter-design">4.4.2. IIR Filter Design</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h2 id="41-introduction">4.1. Introduction</h2>

<p>As we have seen in the previous lab every signal in the time domain has an equivalent representation in the frequency domain by way of the Fourier transform. Information in a signal can be distinctly displayed as a function of the three parameters: time, frequency and phase. Different filters are designed to manipulate the said information in the signal with respect the different parameters.</p>

<p>Use for example the signal x as a function of time:
<script type="math/tex">x(t) = A cos(\omega t + \phi)</script></p>

<p>we can then create filter that when the signal passes through it changes the amplitude, to get <script type="math/tex">y(t) = B(\omega) x(t)</script>.  The output will have a different amplitude compared to the input, depending on the frequency.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="411-filter-terminology">4.1.1. Filter Terminology</h3>

<ul>
  <li>Cut-off Frequency: The frequency around which the signal either passes or stops</li>
  <li>Low Pass: A filter which allows only frequencies <em>below</em> the cutoff frequency  to pass</li>
  <li>High Pass: A filter which allows only frequencies <em>above</em> the cutoff frequency  to pass</li>
  <li>Band Pass: A filter which allows only frequencies <em>between</em> a range of frequencies to pass</li>
  <li>Band Stop: A filter which allows only frequencies <em>no within</em> a range of frequencies to pass</li>
  <li>Pass-Band: The range of frequencies through which the signal passes</li>
  <li>Stop Band: The range of frequencies through which no signal passes ideally.</li>
  <li>Ripple: Oscillations from the expected straight line.</li>
  <li>Roll-off: The region between the end of the pass-band and a stop-band.</li>
  <li>Finite Impulse Response (FIR) Filter:  A filter which has no feedback (or has feed-back that is carefully accounted for), such that an impulse (delta function or step) will have an output that eventually goes to zero.</li>
  <li>Infinite Impulse Response (IIR) Filter:  A filter with feedback.</li>
</ul>

<p><img src="images/04/img/1.png" alt="diagram" /></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="42-moving-average-filter">4.2. Moving Average Filter</h2>

<p>A moving average filter does exactly what its name suggests. It is a very commonly used filter and very simple in its implementation. It performs optimally in the time domain particularly functioning to reduce random noise. It is mathematically represented as:</p>

<script type="math/tex; mode=display">x_{n-point-average} = \frac{x[M]+x[M-1]+ . . . + x[M-(n-1)]}{n} \\
M\ is\ the\ M^{th}\ index</script>

<p><em>NOTE: A moving average filter is a simple finite impulse response(FIR) filter. Specifically it is a low-pass filter.  You can also think of this as a convolution.</em></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="421-exercise-1-noise-reduction">4.2.1. Exercise 1: Noise Reduction</h3>

<p>Use a sine wave from the <code class="highlighter-rouge">signal source</code> and add noise to it (Discussed in Lab 1). Pass this to a 8-tap moving average filter. The flowgraph should resemble this diagram:</p>

<p><img src="images/04/img/2.png" alt="8 point mvngavg" /></p>

<p>Observe the signal before and after the filtering.
Cascade multiple 8 point average filters (i.e. connect end to start). This will require saving just your filter as a ‘hier block’ with two ‘pad sources’ and two ‘pad sinks’ (why two?).  Once the block is compiled, reload the blocks (refresh button in gnuradio-companion).  There should now be a “GRC Hier Blocks” section with your block named.  How does the signal change adding more and more averaging?</p>

<p>*Note: There are two options for ‘heir’ block with or without ‘QT GUI’ appending heir. Choose the one without the ‘QT GUI. Male sure you have to disabled blocks in your floegraph *</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="43-fir-finite-impulse-response-filters">4.3. FIR: Finite Impulse Response Filters</h2>

<p>“A finite impulse response (FIR) filter is a filter whose impulse response (or response to any finite length input) is of finite duration, because it settles to zero in finite time. This is in contrast to infinite impulse response (IIR) filters, which may have internal feedback and may continue to respond indefinitely (usually decaying).”<sup id="fnref:source"><a href="#fn:source" class="footnote">1</a></sup></p>

<p>The flow diagram of an FIR filter is shown below, <script type="math/tex">x[n]\ and\ y[n]</script> are inputs and outputs respectively. <script type="math/tex">z^{-1}</script> is the unit delay and <script type="math/tex">b_n</script> are the filter coefficients.</p>

<p><img src="images/04/img/1000px-FIR_Filter.png" alt="FIR filter wikipedia" /></p>

<p>FIR filters are mathematically fast and relatively easier to design and implement digitally.</p>

<p>We shall design FIR filters using the graphical tool that ships with gnuradio. This tool requires an additional software dependency to work which can be installed by opening a new termina window and entering<code class="highlighter-rouge">sudo apt install python-qwt5-qt4</code>. Once the dependency is installed, in the taskbar (move mouse to the top of the window) click on <code class="highlighter-rouge">tools</code> and then <code class="highlighter-rouge">filter design tool</code></p>

<p><img src="images/04/img/fdt.png" alt="filterdesign" /></p>

<p>We shall design all our filters by graphically using this tool. Theoretically, there are several methods employed to design a filter. The most common used method is by designing a window function.  In the window design method, one first designs an ideal filter which may have an infinite time response (IIR) and then truncates the impulse response by multiplying it with a finite length window function. The result is a finite impulse response filter whose frequency response is modified from that of the IIR filter. Multiplying the infinite impulse by the window function in the time domain results in the frequency response of the IIR being convolved with the Fourier transform of the window function <sup id="fnref:source:1"><a href="#fn:source" class="footnote">1</a></sup></p>

<p>For us, this GUI does everything behind the scenes. We observe the response of the designed filters in the window and use the necessary taps/filter-coefficients in the FIR block.</p>

<p><img src="images/04/img/fdtdemo1.png" alt="filterdesign1" />
<img src="images/04/img/fdtdemo.png" alt="filterdesign2" /></p>

<p>GNU Radio has two kinds of FIR filter blocks. A decimating and interpolating FIR filter which reduce(by dividing) and increase(by multiplying) the number of samples of the filtered signal respectively. When we design our filter we simply copy and paste the Filter Taps in the <code class="highlighter-rouge">Taps</code> field of the filter block properties.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="431-exercise-2-extracting-fundamental-frequencies-from-a-guitarpiano-chord-c-major">4.3.1. Exercise 2: Extracting Fundamental Frequencies from a Guitar/Piano Chord (C Major)</h3>

<p>A chord is the sound produced by playing three  or more notes together. We can use fourier transform to extract the frequencies that make up those chords. Build a flow-graph that simply uses an <code class="highlighter-rouge">audio source</code>, converts the float output to complex and sends that into a <code class="highlighter-rouge">Frequency Sink</code></p>

<p><img src="images/04/img/audiotosink.png" alt="audio to sink" /></p>

<p>Once ready, let’s play the C-Major chord. It is the C (= 261.63Hz) , E (= 329.63Hz) and G (= 392Hz). Notice that the frequency spectrum shows more than just the three fundamental frequencies. They show the harmonics of the three frequencies mentioned above! Recall from Fourier series , these harmonics including the fundamental frequencies when added together makes the waveform that forms the music note. The amplitudes of these harmonics for the same note is different for different instruments because the “timbre” i.e. the waveform produced by every instrument is different!</p>

<p>Now let us extract just the fundamental frequencies by implementing low pass filters to have:</p>

<ol>
  <li>C-E-G Fundamental Frequency ( use cut-off frequency 456 Hz)</li>
  <li>C-E Fundamental Frequency ( use cut-off frequency 361 Hz)</li>
  <li>C Fundamental Frequency ( use cut-off frequency 296 Hz)</li>
</ol>

<p>The outputs of the filters in the frequency sink should look like this by zooming in:
<img src="images/04/img/freq.png" alt="fund. freq" /></p>

<p>You may want to save the filtered audio to disk. Look for the the appropriate “sink” block to do so! You can try this with any other chord. Change the filters accordingly. <a href="https://en.wikipedia.org/wiki/Piano_key_frequencies">Click here</a> for the frequency of every key on the piano.</p>

<p>Fun Fact: Using Fourier transforms and some cool filtering you can transcribe any chords in any any music piece. For example, <a href="https://www.wired.com/2008/10/how-a-professor/">deciphering the “mystery” opening chord of the Beatles’ <em>Hard Day’s Night</em></a></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="432-exercise-3-digital-audio-equalizer">4.3.2. Exercise 3: Digital Audio Equalizer</h3>

<p>Let us try and construct a simple digital equalizer. I shall present the primer for a very simple 3 band equalizer divided into three frequency bands created by three band-pass filters:</p>
<ul>
  <li>Low range: 20Hz – 250Hz</li>
  <li>Mid-range: 250Hz – 4kHz</li>
  <li>High-range: 4kHz – 20kHz</li>
</ul>

<p>Attach this to FM Radio flow-graph before the <code class="highlighter-rouge">audio sink</code>
 The gnuradio flow-graph will follow this diagram:</p>

<p><img src="images/04/img/4.png" alt="equalizer" /></p>

<p>You can of course have more than three frequency channels, you can google commonly used frequency divisions in commercial equalizers.</p>

<p><strong>NOTE</strong>: “Ancient” stereos/cassette players and old audio workstations in music studios have analog equalizers designed using analog filters. If you look at the frequency sink of the output of our digital Equalizer you can observe that the filters work <em>really really</em> well. Digital filters can be very very precisely designed. The roll-off(or transition width) can be as narrow as you want!</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="433-exercise-4-guitar-tuner">4.3.3. Exercise 4: Guitar Tuner</h3>

<p>Let us be more ambitious and design a Digital Guitar Tuner in GNU Radio. It is rather simple and very similar to the equalizer:  It is a series of band-pass filters <strong>centred</strong> on the fundamental frequency of the strings. The Fundamental frequencies of the open guitar string in a standard tuning:</p>

<table>
  <thead>
    <tr>
      <th>String</th>
      <th>Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1 (E)</td>
      <td>329.63 Hz</td>
    </tr>
    <tr>
      <td>2 (B)</td>
      <td>246.94 Hz</td>
    </tr>
    <tr>
      <td>3 (G)</td>
      <td>196.00 Hz</td>
    </tr>
    <tr>
      <td>4 (D)</td>
      <td>146.83 Hz</td>
    </tr>
    <tr>
      <td>5 (A)</td>
      <td>110.00 Hz</td>
    </tr>
    <tr>
      <td>6 (E)</td>
      <td>82.41 Hz</td>
    </tr>
  </tbody>
</table>

<p>The flow-graph should resemble this diagram:</p>

<p><img src="images/04/img/3.png" alt="diagram" /></p>

<p>Choose an appropriate bandwidth. Add frequency and waterfall sinks for each string. What type of window will you use?</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="44-iir-infinite-impulse-response-filters">4.4. IIR: Infinite Impulse Response Filters</h2>

<p>The flow diagram of an IIR filter is shown below, <script type="math/tex">x[n]\ and\ y[n]</script> are inputs and outputs respectively. <script type="math/tex">z^{-1}</script> is the unit delay and <script type="math/tex">b_n</script> are the feed-forward filter coefficients, and <script type="math/tex">a_n</script> are the feed-back coefficients.</p>

<p><img src="images/04/img/IIR-filter.png" alt="IIR-Filter" /></p>

<h3 id="441-classic-analog-filters">4.4.1. Classic Analog Filters</h3>

<p>Analog filters built using traditional circuit elements like inductors, resistors, capacitors, transistor, op-amps, etc. have mathematical approximations that allow us to implement them digitally. There are 4 types each excelling in one parameter while under-performing in another:</p>

<ul>
  <li>
    <p><em>Butterworth</em>: Flattest pass-band but a poor roll-off rate.</p>
  </li>
  <li>
    <p><em>Chebyshev</em>: Some pass-band ripple but a better (steeper) roll-off rate. Chebyshev filters where the ripple is only allowed in the pass-band are called type 1 filters. Chebyshev filters that have ripple only in the stop-band are called type 2 filters , but are are seldom used. Chebyshev filters have a poor phase response.</p>
  </li>
  <li>
    <p><em>Elliptic</em>: Some pass- and stop-band ripple but with the steepest roll-off rate.</p>
  </li>
</ul>

<p><img src="images/04/img/Filters_order5.svg.png" alt="Filters_order5.svg.png" /></p>

<ul>
  <li><em>Bessel</em>: Worst roll-off rate of all four filters but the best phase response.</li>
</ul>

<p><img src="images/04/img/bessel.png" alt="Bessel" /></p>

<p>IIR or Infinite response filters are the closest digital implementations of these filters.</p>

<h3 id="442-iir-filter-design">4.4.2. IIR Filter Design</h3>

<p>Now create an IIR filter to again pull out the fundamental frequency of the C-chord.  Do this again using the ‘Filter design tool’.  When you use an IIR filter, the design is now in ‘normalized’ units of ‘cycles/sample’. To get units of frequency, you must multiply by the sample rate/2 (fs/2) you are using.  So with a sample rate of 48000, you divide the frequency you want by 24000.  For an IIR filter you can use the “IIR Filter” block, where the feed-forward taps are the “b’s” and the feed-back taps are the “a’s”.  Be sure to also select the ‘new’ style of taps.  How many coefficients (taps) are required for an IIR filter in comparison to an FIR filter with a similar response function?  More? Less?  Why?</p>

<p><a href="#">↑ Go to the Top of the Page</a> … <a href="../05">Next Lab</a></p>
<div class="footnotes">
  <ol>
    <li id="fn:source">
      <p>https://en.wikipedia.org/wiki/Finite_impulse_response#Window_design_method <a href="#fnref:source" class="reversefootnote">&#8617;</a> <a href="#fnref:source:1" class="reversefootnote">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsplab-filters/</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of labs using GNURadio
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Digital Signal Processsing using GNURadio - Fourier Analysis</title>
                <link>http://localhost:4000/dsplab-fourier1/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="1-fourier-analysis">1. Fourier Analysis</h1>

<p>Fourier Analysis is a very powerful tool that comes into play when we discuss periodic signals. Colloquially, a periodic signal repeats.</p>

<!-- TOC -->

<ul>
  <li><a href="#1-fourier-analysis">1. Fourier Analysis</a>
    <ul>
      <li><a href="#31-introduction">3.1. Introduction</a></li>
      <li><a href="#32-fourier-series">3.2. Fourier Series</a>
        <ul>
          <li><a href="#321-a-sqaure-wave">3.2.1. A Sqaure Wave</a></li>
          <li><a href="#322-a-triangle-wave">3.2.2. A Triangle Wave</a></li>
          <li><a href="#323-a-sawtooth-wave">3.2.3. A Sawtooth wave.</a></li>
        </ul>
      </li>
      <li><a href="#33-fourier-series-and-fourier-transforms">3.3. Fourier Series and Fourier Transforms</a>
        <ul>
          <li><a href="#331-fourier-transform">3.3.1. Fourier Transform</a></li>
          <li><a href="#332-example">3.3.2. Example</a></li>
        </ul>
      </li>
      <li><a href="#34-fourier-transform-pairs">3.4. Fourier Transform Pairs</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h2 id="31-introduction">3.1. Introduction</h2>

<p>Mathematically a signal <script type="math/tex">x(t)</script> is periodic if there exists a positive constant <script type="math/tex">T</script> such that:
<script type="math/tex">x(t) = x(t + T)</script>
for all values of <script type="math/tex">t</script>. The smallest value of <script type="math/tex">T</script> for which this is true is called the fundamental period and is denoted <script type="math/tex">T_o</script>. The corresponding <em>fundamental frequency</em> is <script type="math/tex">f_o = \frac{1}{T_o}</script>. If <script type="math/tex">T_o</script> is in seconds, then <script type="math/tex">f_o</script> is in Hertz (Hz). The fundamental angular frequency is <script type="math/tex">\omega_o = 2\pi f_o</script> and is measured in rad/sec.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="32-fourier-series">3.2. Fourier Series</h2>

<p>A Fourier series is an expansion of a periodic function f(x) in terms of an infinite sum of sines and cosines. The computation and study of Fourier series is known as harmonic analysis and is extremely useful as a way to break up an arbitrary periodic function into a set of simple terms that can be plugged in, solved individually, and then recombined to obtain the solution to the original problem or an approximation to it to whatever accuracy is desired or practical. <sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p>Mathematically in a simple sense an arbitrary function <script type="math/tex">f(t)</script> can be decomposed as:</p>

<script type="math/tex; mode=display">f(x) = a_0 + \sum_{n=1}^{\infty} a_n cos(nx) + b_n sin(nx)</script>

<p>We shall explore this concept by making two waveforms using sinosoids:</p>

<h3 id="321-a-sqaure-wave">3.2.1. A Sqaure Wave</h3>

<p>From <a href="../01/">Lab 1</a>, we have the function generator. We use that to make a square wave of amplitude = 1.</p>

<p>Mathematically it can be written as:</p>

<script type="math/tex; mode=display">% <![CDATA[
f(x) = 
  \begin{cases} 
   0 & \text{if } -\pi \leq x \lt 0 \\
   1       & \text{if } 0 \leq x \lt \pi
  \end{cases}\ and\ f(x+2\pi)=f(x) %]]></script>

<p>Which has a period of <script type="math/tex">2\pi</script>.  For an arbitrary period P:</p>

<script type="math/tex; mode=display">% <![CDATA[
f(x) = 
  \begin{cases} 
   0 & \text{if } -P/2 \leq x \lt 0 \\
   1       & \text{if } 0 \leq x \lt P/2
  \end{cases}\ and\ f(x+P)=f(x) %]]></script>

<p>The corresponding Fourier series of the square wave with period <script type="math/tex">2\pi</script></p>

<script type="math/tex; mode=display">f(x) = \frac{1}{2} + \sum_{n=1}^{\infty} \frac{2}{(2k-1)\pi} sin[(2k-1)x] \\
\ \ \ = \frac{1}{2} + \frac{2}{\pi}sin(x) + \frac{2}{3\pi}sin(3x) + \frac{2}{5\pi}sin(5x) + \frac{2}{7\pi}sin(7x) + ... + + \frac{2}{n\pi}sin(nx)\ (\ n\ is\ odd)</script>

<p>and for arbirary period P:</p>

<script type="math/tex; mode=display">f(x) = \frac{1}{2} + \sum_{n=1}^{\infty} \frac{2}{(2k-1)\pi} sin[\frac{2\pi}{P}(2k-1)x] \\
\ \ \ = \frac{1}{2} + \frac{2}{\pi}sin(\frac{2\pi}{P}x) + \frac{2}{3\pi}sin(\frac{2\pi}{P}3x) + \frac{2}{5\pi}sin(\frac{2\pi}{P}5x) + \frac{2}{7\pi}sin(\frac{2\pi}{P}7x) + ... + + \frac{2}{n\pi}sin(\frac{2\pi}{P}nx)\ (\ n\ is\ odd)</script>

<p>Use more and more sources to add additional sinusoids and see what waveform you get after each added term.  How many terms until you’re square wave looks good?  5?  10?</p>

<p>It should look similar to this:</p>

<p><img src="images/03/img/1.png" alt="square wave" /></p>

<p>This type of analysis is important for digital design in the sense that most digital signals are square waves, representing either a 1 or a zero.  So if your signal is at 10MHz, how fast should the electronics and design work?</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="322-a-triangle-wave">3.2.2. A Triangle Wave</h3>

<p>The triangular wave is defined as:
<script type="math/tex">f(x)=|x|\  for\ -1\lt x \leq 1\ and\ f(x+2)=f(x)\ for\ all\ x</script></p>

<p>Its corresponding fourier series is:</p>

<script type="math/tex; mode=display">f(x) = \frac{1}{2} - \sum_{n=1}^{\infty} \frac{4}{(2k-1)^2\pi^2} cos[(2k-1)\pi x] \\
= \frac{1}{2} - \frac{4}{\pi^2}cos(\pi x) - \frac{4}{9\pi^2}cos(3 \pi x) - \frac{4}{25\pi^2}cos(5\pi x) - ...</script>

<p>Make a flowgraph out of the expanded terms above and check the output after each operation. Do you need more or fewer components to begin looking like a triangle wave as compared to a square wave?  Why do you think that is?</p>

<p>It should give an output like this:</p>

<p><img src="images/03/img/2.png" alt="Triangle wave" /></p>

<hr />

<h3 id="323-a-sawtooth-wave">3.2.3. A Sawtooth wave.</h3>

<p>Now mathematically define a sawtooth wave and find it’s Fourier series expansion.  Then create its flow-graph, again with more and more Fourier components.  Again, do you need more/less Fourier components as compared to a square or triangle wave?</p>

<h2 id="33-fourier-series-and-fourier-transforms">3.3. Fourier Series and Fourier Transforms</h2>

<p>We segue into the concept of Fourier transforms directly by seeing how they relate to fourier series. First some mathematics to associate familiarity, the Fourier transform of <script type="math/tex">x(t)</script> is given by:</p>

<script type="math/tex; mode=display">X(\omega) = \int_{-\infty}^{+\infty} x(t) cos(\omega t)dt -i \int_{-\infty}^{+\infty} x(t) sin(\omega t) = \int_{-\infty}^{+\infty}x(t)e^{-i\omega t}dt</script>

<p>When x(t) is periodic and has a Fourier series expansion, this integral is pulling out those sines and cosines in the expansion.</p>

<p>In more detail: For the complex representation of a Fourier series of a periodic function <script type="math/tex">x(t)</script> :</p>

<script type="math/tex; mode=display">x(t) = \sum_{-\infty}^{\infty} c_n e^{jn\omega t}</script>

<p>The co-effecients, <script type="math/tex">c_n</script> of <script type="math/tex">x(t)</script> (which  has the period <script type="math/tex">T</script> is given by the relation:</p>

<script type="math/tex; mode=display">c_n = \frac{1}{T} X(n\omega_o)</script>

<p>where <script type="math/tex">X(\omega)</script> is the Fourier transform and <script type="math/tex">\omega_o = \frac{2\pi}{T}</script></p>

<p><strong>In summary, the Fourier series of a signal is a sum of sines and cosines. And, the Fourier transform decomposes the signal into it’s its frequency components with their relative strength. This can be visually seen in a neat animation as shown below ( <em>credit: wikipedia</em> ) and in the next section</strong></p>

<p><img src="images/03/img/Fourier_series_and_transform.gif" alt="animation FS" /></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="331-fourier-transform">3.3.1. Fourier Transform</h3>

<p>Use the <a href="../03/#321-a-sqaure-wave">Square Wave</a> and the <a href="../03/#322-a-triangle-wave">Triangle Wave</a> flowgraphs from the previous exercise.</p>

<p>First use a <code class="highlighter-rouge">signal source</code> block to make a square wave and feed the signal into a <code class="highlighter-rouge">QT frequency sink</code></p>

<p><strong>The Frequency Sink takes the Fourier Transform of the incoming signal and plots the output of the fourier transform</strong></p>

<p>Place another <code class="highlighter-rouge">QT Frequency Sink</code> and change the number of inputs to the number of Fourier series sinusoids you have in your flowgraph and feed all the sinusoids (vis-a-vis the individual Fourier series terms) into the frequency sink</p>

<p>The output looks like this:</p>

<p><img src="images/03/img/3.png" alt="1.png" /></p>

<p>The colored peaks are the Fourier transforms of the individual sinusoids. Do they align with the Fourier Transform of the pure square wave? If you add more terms of the Fourier series to the sink, how do they compare?</p>

<p>Repeat this exercise for the triangle wave.</p>

<p>We’ve been taking Fourier transform of the signal every time we see a plot with frequency in the time axes.</p>

<p>We shall visit Fourier transforms in detail again that in Lab 5.</p>

<h3 id="332-example">3.3.2. Example</h3>

<p>We can also think of this to use gnuradio-companion to graphically get the Fourier components of a signal using a Fourier transform.  Create a flow-graph with a signal source-&gt;FFT(Fourier transform)-&gt; complex to real/imag -&gt; vector sinks.  The output of the real-part contains the cosine components of the transform.  The imaginary part contains the sine components of the Fourier expansion.</p>

<p>It is also helpful to plot the time series to see what your input is and the frequency sink to make it easier to just read off the frequency of the components.</p>

<p>An example flowgraph looks like:
<img src="images/03/img/4.png" alt="sawtooth" /></p>

<p>The FFT block is a special block which does the Fourier transform really fast. Play around with the FFT block and your general waveform generator from Lab 1 to take their Fourier transform.  Use this to read off the Fourier series coefficients.  This can still be used with a periodic signal with much less obvious structure.</p>

<h2 id="34-fourier-transform-pairs">3.4. Fourier Transform Pairs</h2>

<p>Let us revisit Fourier transform by exploring the concept through their various properties. Refer to this <a href="http://www.ws.binghamton.edu/fowler/fowler%20personal%20page/EE301_files/FT%20Tables_rev3.pdf">Table of Fourier Transform Pairs and Properties</a> and implement in gnuradio the following :</p>

<ol>
  <li>Fourier Transform a Sinusoid and</li>
  <li>Fourier transform of the sinusoid delayed by one sample</li>
  <li>The output of the Fourier transform of a constant source of the value 1 is a dirac delta function. Find the FT of the dirac delta function and the dirac delta function time delayed.</li>
  <li>Fourier transform of <script type="math/tex">e^{j\omega_o t}</script></li>
  <li>Demonstrate the convolution property (use square wave) <em>Hint: Inverse Fourier transform can be implemented by choosing <code class="highlighter-rouge">reverse</code> in the <code class="highlighter-rouge">Forward/Reverse</code> Option. Hint: The output should be a triangle wave</em></li>
  <li>Fourier transform  a square pulse of different widths (i.e. tau <em>refer lab 1.3.1</em>)</li>
</ol>

<p>Try to implement other properties from the link of fourier transform pairs and properties as well.</p>

<p><strong>NOTE: Use the <code class="highlighter-rouge">FFT</code> Block for the above exercises. Use complex sources. The <code class="highlighter-rouge">FFT</code> block takes an input vector and outputs a complex vector. Use to appropriate stream to vector and complex to real/imaginary convertor blocks where necessary</strong></p>

<p><strong>The power of the FFT output is given by multiplying the complex output of the FFT by its complex conjugate</strong></p>

<p><strong>Use vector sinks for signals that ‘vectors’ i.e. data comes out in chunks of a particular matrix size(vector length)</strong></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<hr />

<p><a href="#">↑ Go to the Top of the Page</a> ……<a href="../04">Next Lab</a></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://mathworld.wolfram.com/FourierSeries.html <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsplab-fourier1/</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of labs using GNURadio
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Digital Signal Processsing using GNURadio - Software Defined Radio</title>
                <link>http://localhost:4000/dsplab-sdr/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="2-software-defined-radio---hardware">2. Software Defined Radio - Hardware</h1>

<p>In <a href="../01/">Lab 1</a> we learned how to work around GNU Radio Companion (GRC) and simulate signals and instruments. We shall now step into the real world with real signals.</p>

<!-- TOC -->

<ul>
  <li><a href="#2-software-defined-radio---hardware">2. Software Defined Radio - Hardware</a>
    <ul>
      <li><a href="#21-introduction">2.1. Introduction</a></li>
      <li><a href="#22-frequency-correction-of-the-sdr-dongle">2.2 Frequency Correction of the SDR Dongle</a></li>
      <li><a href="#23-gnuradio-fm">2.3. GNURadio FM</a>
        <ul>
          <li><a href="#231--signal-modulation">2.3.1  Signal Modulation</a>
            <ul>
              <li><a href="#2311-amplitude-modulation">2.3.1.1 Amplitude Modulation</a></li>
              <li><a href="#2312-frequency-modulation">2.3.1.2 Frequency Modulation</a></li>
            </ul>
          </li>
          <li><a href="#232-lets-make-our-fm-radio">2.3.2 Let’s Make our FM Radio</a></li>
        </ul>
      </li>
      <li><a href="#24-fun-sdrgnu-radio-things">2.4. Fun SDR/GNU Radio things</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h2 id="21-introduction">2.1. Introduction</h2>

<p>A “simplified” diagram of the device which we shall be using is shown below:</p>

<p><img src="images/02/img/1.png" alt="AIRSPY" /></p>

<p>Simplifying this further for a general SDR hardware including the energy conversions:</p>

<p>(EM Waves)))) &gt;-(Antenna)–&gt;(Amplifier)—&gt;(Local Oscillators + Filters)–&gt;(Analog to Digital Convertor)–&gt;(networking control: usually USB)—&gt;[Computer]</p>

<p>Radio Waves excite electrons in the antenna and induces a current. The frequencies the antenna is most sensitive to is determined by the geometry of the antenna’s design. The electric current is then initially amplified a bit. This amplifier is generally a “Low Noise Amplifier” because we want as little as possible in the antenna signal from the local electronics. Processing a signal at a fixed frequency gives a radio receiver improved performance so thus a local oscillator (LO) is used. It is an electronic oscillator used with a mixer to change the frequency of a signal. This frequency conversion process, also called heterodyning, produces the sum and difference frequencies from the frequency of the local oscillator and frequency of the input signal. The desired frequency is then filtered out and if required amplified again. The last step is the most crucial step where-in the signal is digitized to be sent to the computer to be manipulated by our gnuradio code!</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>
<h2 id="22-frequency-correction-of-the-sdr-dongle">2.2 Frequency Correction of the SDR Dongle</h2>

<p>The hardware is well made, but a precision clock is quite expensive. The frequency the “tuner” tunes to may be slightly off from the actual frequency it is tuning to. We can correct for that in the software.  For high-end SDR dongles this correction is virtually non existent but some low-end dongles have higher deviations!</p>

<p>We can transmit a signal using a known and reliable tone. Then we use our receiver set up with gqrx to see the signal. If the incoming signal is exactly at the expected frequency then the intenral clock is working well. If not we look at the <code class="highlighter-rouge">input controls</code> tab in gqrx and change the <code class="highlighter-rouge">freq. correction</code> value until the peak is at the correct output.
 This value will be different for all dongles.  It also changes with the temperature of the dongle.  It is interesting to watch this change as the dongle warms up. Note your value for future purposes.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>
<h2 id="23-gnuradio-fm">2.3. GNURadio FM</h2>

<p>We used gqrx in section 1.2 to listen to FM now we shall code our own radio using GRC!</p>

<h3 id="231--signal-modulation">2.3.1  Signal Modulation</h3>

<p>Modulation is a process of mixing a signal with a sinusoid to produce a new signal. Consider a signal represented by the function:</p>

<script type="math/tex; mode=display">f(t) = A \sin(\omega t + \phi).</script>

<p>This sinusoid has 3 variables that can be altered ti change the function f(t). The first term, A, is called the magnitude, or amplitude of the sinusoid. The next term, <script type="math/tex">\omega</script> is known as the frequency, and the last term, <script type="math/tex">\phi</script> is known as the phase angle. We can encode our message in either of these three parameters.</p>

<p>The sinusoidal signal that is used in the modulation is known as the carrier signal, or simply “the carrier”. The signal that is used in modulating the carrier signal (or sinusoidal signal) is known as the “data signal” or the “message signal”.</p>

<p>In other words we can say that modulation is used because some data signals are not always suitable for direct transmission, but the modulated signal may be more suitable.</p>

<p>It follows  from above we encode in the above three variables. Consequently, we have 3 basic types of analog modulation:</p>

<ul>
  <li>Amplitude Modulation</li>
  <li>Frequency Modulation</li>
  <li>Phase Modulation</li>
</ul>

<h4 id="2311-amplitude-modulation">2.3.1.1 Amplitude Modulation</h4>

<p>For our discussion of amplitide modulation consider a carrier wave of frequency <script type="math/tex">f_c</script> and amplitude <script type="math/tex">A</script> given by:</p>

<script type="math/tex; mode=display">c(t) = A \cdot \sin(2 \pi f_c t).</script>

<p>Let <script type="math/tex">m(t)</script> represent the modulation waveform. For this example we shall take the modulation to be simply a sine wave of a frequency <script type="math/tex">f_m</script>, a much lower frequency (such as an audio frequency) than <script type="math/tex">f_c</script>:</p>

<script type="math/tex; mode=display">m(t) = M\cdot \cos(2 \pi f_m t + \phi),</script>

<p>where <script type="math/tex">M</script> is the amplitude of the modulation. If <script type="math/tex">M>1</script> then overmodulation occurs and reconstruction of message signal from the transmitted signal is more difficult. Amplitude modulation results when the carrier <script type="math/tex">c(t)</script> is multiplied by the positive quantity  <script type="math/tex">(1+m(t))</script>:</p>

<script type="math/tex; mode=display">y(t) = [1 + m(t)]\cdot c(t) \\
\ \ = [1 + M\cdot \cos(2 \pi f_m t + \phi)] \cdot A \cdot \sin(2 \pi f_c t)</script>

<p>Using trigonometric identities, <script type="math/tex">y(t)</script> can be shown to be the sum of three sine waves:</p>

<script type="math/tex; mode=display">y(t) = A \cdot \sin(2 \pi f_c t) + \frac{AM}{2} \left[\sin(2 \pi (f_c + f_m) t + \phi) + \sin(2 \pi (f_c - f_m) t - \phi)\right]</script>

<p>Therefore, the modulated signal has three components: the carrier wave <script type="math/tex">c(t)</script> which is unchanged, and two pure sine waves (known as sidebands) with frequencies slightly above and below the carrier frequency <script type="math/tex">f_c</script>.</p>

<p>Demodulation or extracting the message from the carrier involves simply filtering out the carrier signal. We can construct an AM radio receiver on GNU radio however our SDR dongle can only tune from ~20 MHz to ~1800 MHz.</p>

<h4 id="2312-frequency-modulation">2.3.1.2 Frequency Modulation</h4>

<p>As the name suggests the message signal is encoded in the frequency variable of the carrier signal as in <script type="math/tex">x(t) = a \sin (f(t)t + \phi)</script>. If the information to be transmitted (i.e., the data/message signal is <script type="math/tex">x_m(t)</script> and the sinusoidal carrier is <script type="math/tex">x_c(t) = A_c \cos (2 \pi f_c t)</script>, where <script type="math/tex">f_c</script> is the carrier’s base frequency, and <script type="math/tex">A_c</script> is the carrier’s amplitude, the modulator combines the carrier with the data/message signal to get the transmitted signal</p>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align} 
y(t) & = A_c \cos \left( 2 \pi f(t) t \right) \\ 
     & = A_{c} \cos \left( 2 \pi \left[ f_{c} + f_{\Delta} x_{m}(t) \right] t\right)\\ 
     & = A_{c} \cos \left( 2 \pi f_{c} t + 2 \pi f_{\Delta} x_{m}(t) t \right) \\ 
\end{align} %]]></script>

<p>where $$f_{\Delta} is the sensitivity of the frequency modulator which adjusts how much bandwidth is used for the signal.</p>

<h3 id="232-lets-make-our-fm-radio">2.3.2 Let’s Make our FM Radio</h3>

<p>One way to demodulate the signal is to extract the message encoded in the frequency of the sinusoid outside the sinusoid. That can be achieved by “fast” differentiating the sine wave, treating the message as a constant. Consider the following:</p>

<script type="math/tex; mode=display">x(t) = a \sin (f(t)t + \phi) \\
\frac{d x(t)}{dt} = af(t) \cos(f(t)t + \phi) \\
\ \ \  = A(t) \cos(f(t) + \phi)</script>

<p>For the FM signal</p>

<script type="math/tex; mode=display">y(t) = A_c \cos \left( 2 \pi f_c t + 2 \pi f_{\Delta} x_{m} (t) t  \right) \\
 \ \ \  = A_c cos ( \theta(t) )</script>

<script type="math/tex; mode=display">% <![CDATA[
\begin{align} 
y'(t) & = -A_c \theta ' (t) \sin(\theta (t) ) \\
    & = -2 \pi A_c ( f_c + f_{\Delta} x_m(t) ) \sin (\theta (t))
\end{align} %]]></script>

<p>We observe that we converted the FM signal into the form <script type="math/tex">y(t) = [1 + m(t)]\cdot c(t)</script> which is an AM signal. We can easily demodulate this AM signal by filtering out the AM “carrier”. It follows the following flow:</p>

<table>
  <tbody>
    <tr>
      <td>FM —-&gt;</td>
      <td>Differentiator</td>
      <td>—-&gt;</td>
      <td>Envelope Detector</td>
      <td>—-&gt; Signal</td>
    </tr>
  </tbody>
</table>

<p>A similar operation can be achieved in GNU radio using the following flow:</p>

<table>
  <tbody>
    <tr>
      <td>FM —&gt;</td>
      <td>Filter out the signal of interest</td>
      <td>—&gt;</td>
      <td>Resample Signal</td>
      <td>—&gt;</td>
      <td>Quadrature Demodulator</td>
      <td>—&gt;</td>
      <td>Lowpass Filter</td>
      <td>—&gt; Audio Signal</td>
    </tr>
  </tbody>
</table>

<p>The quadrature demodulator uses a different technique than differentiating the signal since the incoming data is complex, but the end result is the same, where the output is proportional to the change in frequency of the input. (That gnuradio block actually has a good explanation of the math in the description. )</p>

<p><strong>Hints:</strong></p>

<p><strong>Source</strong>: Since we are using a hardware source we have to use the appropriate block. Search for the <code class="highlighter-rouge">osmocom Source</code> block. The Device arguments should be <code class="highlighter-rouge">airspy=0</code>. <strong>NOTE: The Sample rate supported by this dongle is either 2.5 MHz or 10 MHz. We shall set our <code class="highlighter-rouge">samp_freq</code> variable to <code class="highlighter-rouge">2500000</code></strong>. The <code class="highlighter-rouge">Ch0: Frequency (Hz)</code> is the frequency you want to tune to.</p>

<p><img src="images/02/img/7.png" alt="source" /></p>

<p><strong>Low Pass Filter</strong>: This filters out all the frequencies apart from the one we want to tune our radio to. Note that I have another variable called <code class="highlighter-rouge">channel_width</code> which is equal to <code class="highlighter-rouge">200e3</code>. It is to filter out at a data rate 200kHz.</p>

<p><img src="images/02/img/7_1.png" alt="LP Filter" /></p>

<p><strong>Resampling Signal</strong>: Use the ‘Rational Resampler’ block. Resample the signal such that the frequency of the signal is a multiple of out output frequency. The output frequency ( ‘out_rate’) is the frequency at which the sound card accepts samples i.e. 48 kHz to play audio. The output frequency should still be near to the bandwhith of the message i.e. 200kHz. 192kHz ie ‘out_rate’ is the closest multiple of 48kHz to it. As noticed on the screen shot here is a new variable ‘decimation == int(samp_rate/(2*channel_width))’</p>

<p><img src="images/02/img/7_2.png" alt="resample" /></p>

<p><strong>Quadrature demodulation</strong>: This block extracts the time dependend frequency component of the signal which is the audio signal.Use the quad demod block and fill in ‘(out_rate/(2<em>math.pi</em>channel_width))’ in the gain field</p>

<p><img src="images/02/img/7_4.png" alt="quaddemod" /></p>

<p><strong>Lowpass Filter</strong>: Use a lowpass filter with the cutoff frequency at 18 kHz ( because human audio perfecption has an upper limit close to it). Enter the decimation value to downsample the signal coming in from 192kHz to 48kHz the rate at which the sound card works.</p>

<p><img src="images/02/img/7_3.png" alt="lp2" /></p>

<p><strong><em>Play audio from an audio sink</em></strong></p>

<p>Lets capture some sweet tunes!</p>

<!--
Our FM Radio design GRC in its most basic has the following flow:

[Source]--(Low Pass Filter)---(Resampler)--(FM demodulator)---(Volume Gain)---[Audio Sink]

Find the corresponding blocks and connect them according to the flow given above. Use appropraite variables and GUI elements. USe the QT GUI Sink to visually show the signal in the flow before and after modulation. 

*Hints for reference*

**Source**: Since we are using a hardware source we have to use the appropriate block. Search for the ``osmocom Source`` block. The Device arguments should be ``airspy=0``. **NOTE: The Sample rate supported by this dongle is either 2.5 MHz or 10 MHz. We shall set our ``samp_freq`` variable to ``2500000``**. The ``Ch0: Frequency (Hz)`` is the frequency you want to tune to. 

![source](images/02/img/7.png)

**Low Pass Filter**: This filters out all the frequencies apart from the one we want to tune our radio to. Note that I have another variable called ``channel_width`` which is equal to ``200e3``. It is to filter out at a data rate 200kHz. 

![LP Filter](images/02/img/7_1.png)

**Resampler**: We are attempting to change the data rate to 480kHz which is 10 times (a nice multiple of) the soundcard's working frequency for all audio data files, and will still contain all the information left after we filtered to 200kHz. We do this because the sample rate is 2.5MHz and 480kHZ is not divisor of it i.e. they aren't integral multiples ( 2.5MHz/480kHz = 5.208).  Continuing the resampling we started earlier. we 'decimate' the input by dividing ``5`` and 'interpolate' it by mulitplying by ``12`` to resample to 480kHz!

![resampler](images/02/img/8.png)

**FM demodulator**: This is the most important part of the radio, well, it is essentially the radio as it decodes the signals to audio!

![demod](images/02/img/9.png)

**Volume Gain**: Raise the roof people! It's a simple multiply constant block.

**Audio Sink**: To listen to the sweet tunes!

The choices made so far here may seem a bit arbitrary.  In the future we'll go into filters and filter design, and you can return to your FM radio, and possibly improve it!
-->

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="24-fun-sdrgnu-radio-things">2.4. Fun SDR/GNU Radio things</h2>

<ol>
  <li>AM Radio! (see above)</li>
  <li>Narrow Band FM ( same are FM but a narrower filter passband)</li>
  <li><a href="http://www.rtl-sdr.com/adsb-aircraft-radar-with-rtl-sdr/">Listen to and get airplain ADS-B data</a>
To chekc it out on your own get this software: <a href="https://github.com/MalcolmRobb/dump1090">dump1090</a></li>
  <li>Listen to HAM radio chatter ( usually amplitude modulated )</li>
  <li>EMS and police and local services radio. <a href="https://www.radioreference.com/apps/db/">local scanners and frequencies</a></li>
  <li>WeatherFAX. Get latest images of weather data from naval bases! <a href="http://www.rtl-sdr.com/receiving-weather-rtty-rtl-sdr/">http://www.rtl-sdr.com/receiving-weather-rtty-rtl-sdr/</a></li>
  <li>
    <p>Get satellite data (Receive and decode live satellite images of earth):
 These satellite transmit that these frequencies:
NOAA 15 – 137.6200 MHz
NOAA 18 – 137.9125 MHz
NOAA 19 – 137.1000 MHz</p>
  </li>
  <li>If transmitted nearby get a newspaper over the radio!</li>
  <li><a href="http://theori.io/research/nrsc-5-c">Decode high definition radio</a></li>
  <li>Build your own radio astronomy observatory! ( ok we are totally doing that!)</li>
</ol>

<p><a href="#">↑ Go to the Top of the Page</a> ……<a href="../03">Next Lab</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsplab-sdr/</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of labs using GNURadio
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Digital Signal Processsing using GNURadio - Introductory Lab</title>
                <link>http://localhost:4000/dsplab-intro/</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="1-introduction-to-gnu-radio-and-signals">1. Introduction to GNU Radio and Signals</h1>

<p>This page shall guide you through our primary tool – GNU Radio. GNU Radio is very popular and robust Software defined radio package. It is open source and is relatively very easy to use. All “coding” is done using flowgraphs comprised of  interconnected Digital Signal Processing (DSP) blocks. Most commonly used blocks come predefined as part of the software package however  one can program their own blocks as well.</p>

<!-- TOC -->

<ul>
  <li><a href="#1-Introduction-to-GNU-Radio-and-Signals">1. Introduction to GNU Radio and Signals</a>
    <ul>
      <li><a href="#11-Installation-Guide">1.1. Installation Guide</a></li>
      <li><a href="#12-GQRX---Its-cool">1.2. GQRX - It’s cool</a>
        <ul>
          <li><a href="#121-Getting-Started-with-GNU-Radio">1.2.1. Getting Started with GNU Radio</a></li>
        </ul>
      </li>
      <li><a href="#13-Lets-get-Familiar">1.3. Let’s get Familiar</a>
        <ul>
          <li><a href="#131-A-Cosine-Waveform-generator">1.3.1. A Cosine Waveform generator</a></li>
          <li><a href="#132-A-Cosine-Waveform-Generator-with-Variable-Frequency-and-Sound">1.3.2. A Cosine Waveform Generator with Variable Frequency and Sound</a></li>
          <li><a href="#133-A-General-Waveform-Generator">1.3.3. A General Waveform Generator</a></li>
        </ul>
      </li>
      <li><a href="#14-GNU-Radio-and-Python">1.4. GNU Radio and Python</a>
        <ul>
          <li><a href="#141-Arbitrary-Function-generation">1.4.1. Arbitrary Function generation</a></li>
        </ul>
      </li>
      <li><a href="#15-Note-on-the-Frequency-Display">1.5. Note on the Frequency Display</a></li>
      <li><a href="#16-Exercises">1.6. Exercises</a></li>
      <li><a href="#17-Random-Discrete-Signals">1.7. Random Discrete Signals</a></li>
      <li><a href="#18-Sampling">1.8. Sampling</a></li>
      <li><a href="#19-Histograms">1.9. Histograms</a></li>
      <li><a href="#110-GnuRadio-Companion-Example">1.10. GnuRadio Companion Example.</a></li>
      <li><a href="#111-Make-your-own-gaussian-noise-block">1.11. Make your own gaussian noise block</a></li>
    </ul>
  </li>
</ul>

<!-- /TOC -->

<h2 id="11-installing-gnuradio">1.1. Installing GNURadio</h2>

<p><a href="/dspira-lessons/BuildingHorn_SoftwareInfo" class="button">Software Info</a></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="12-gqrx---its-cool">1.2. GQRX - It’s cool</h2>

<p><a href="http://gqrx.dk">GQRX</a> is an application written using gnuradio. It acquired data from the dongle and has a set of preset options to manipulate said signals. It can even store raw data for custom decoding. Install gqrx</p>

<p>First, we make sure our dongle is plugged into the USB see if it is detected by the computer by typing  <code class="highlighter-rouge">airspy_info</code>. If we installed all software correctly it should return information about the dongle and no errors. If everything is in order the type in terminal:</p>

<p><code class="highlighter-rouge">
gqrx
</code></p>

<p>It will open a window that looks like this.</p>

<p><img src="images/01/img/gqrx2.png" alt="gqrx" /></p>

<p>If you are using for the first time the hardware setting window/(IO setting) should open automatically and also automatically detect the dongle.  If not chose <code class="highlighter-rouge">AirSpy AIRSPY</code> from the drop down. 
Otherwise you can open it by clicking on the “circuit board” icon next to the play triangle. The I/O device settings should look like this:</p>

<p><img src="images/01/img/gqrx3.png" alt="io" /></p>

<p>Once it is all in order click play. The window should show the spectrum as such:</p>

<p><img src="images/01/img/gqrx4.png" alt="spect out" /></p>

<p>Hit play. Change the frequency to 100 Mhz. Notice the bright bands on the waterfall and the peaks, these are local FM stations</p>

<p><img src="images/01/img/gqrx5.png" alt="io" /></p>

<p>Since the sample rate is very high (a feature of this particular hardware). We click on the “circuit board” button again and change input rate 2500000 (from the drop down). In the receiver options the right change <code class="highlighter-rouge">Mode</code> to <code class="highlighter-rouge">WFM</code> ( wideband FM ) from the drop down and et voila old timey over-the-air radio on your space-age computer.</p>

<p><img src="images/01/img/gqrx6.png" alt="io" /></p>

<p>We can use this application to receive even decode to all kinds of signals from 24 – 1800 Mhz. Check out <a href="../02/#14-fun-sdrgnu-radio-things">Section 1.4</a></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="121-getting-started-with-gnu-radio">1.2.1. Getting Started with GNU Radio</h3>

<p>As mentioned earlier, <em>gqrx</em> has GNUradio as its engine. We can start developing using this tool right away by typing <code class="highlighter-rouge">gnuradio-companion</code> in the terminal:</p>

<p><img src="images/01/img/01.png" alt="start gnuradio-companion" /></p>

<p>This opens GNU Radio Companion (GRC):</p>

<p><img src="images/01/img/02.png" alt="gnuradio gui" /></p>

<p>The “Options” block at the top left is used to set some general parameters of the flowgraph, such as metadata of the flowgraph like the title, author, etc., the graphical user interface (GUI) for widgets and result displays, or the size of the canvas on which the DSP blocks are placed. Right-click on the block and click on Properties (or double-click on the block) to see all the parameters that can be set. Below the Options block is a “Variable” block that is used to set values to variables that are used throughout the flowgraph like the sample rate, e.g.,\(F_s = 32000 Hz\)</p>

<p><img src="images/01/img/03.png" alt="top_block" /> <img src="images/01/img/04.png" alt="variable block" /></p>

<p>Every GRC window has these two very basic blocks. The white space is called the GRC canvas.</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="13-lets-get-familiar">1.3. Let’s get Familiar</h2>

<p>On the right side of the window is a list of the block categories that are available. Click on a triangle next to a category to see what blocks are available in that category. We will look for the waveform generator category to look for the signal source block. Alternatively, we can click on the magnifying/looking glass to the top right and search for the block we need. We will add the <code class="highlighter-rouge">signal source</code> block to the canvas by double clicking on signal source</p>

<p><img src="images/01/img/05.png" alt="adding signal source" /></p>

<p>To move a block on the canvas, grab it with the cursor, press the left mouse button, and move the block to the desired location. You can also rotate blocks by right-clicking on them and then clicking either “Rotate Counterclockwise” or “Rotate Clockwise”. Blocks can also be temporarily disabled by clicking on “Disable”, which is useful for debugging and what-if questions. The rearranged blocks with the options for the “Signal Source” visible are shown next.</p>

<hr />
<p><strong><em>Aside</em></strong></p>

<p>We notice that the “Signal Source” block has two ports, a grey one on the left and a blue one on the right. The color of a port indicates the type of data generated for an output port or the type of data accepted for an input. The most common data types that we will use are:</p>

<ul>
  <li>Blue for complex-valued 32-bit floating point data samples (32 bits for each, real and imaginary part).</li>
  <li>Orange for real-valued 32-bit floating point data samples</li>
  <li>Blue-Green for real-valued 32-bit (long) integer data samples</li>
  <li>Yellow for real-valued 16-bit (short) integer data samples</li>
  <li>Magenta for real-valued 8-bit (byte) integer data samples</li>
</ul>

<p><img src="images/01/img/06.png" alt="datatypes" /></p>

<p>GNU Radio uses a stream processing model to process large amounts of data in real-time as opposed to a array processing environment (like Matlab). In practice this means that each signal processing block has an independent scheduler running in its own execution thread and each block runs as fast as the CPU, dataflow, and buffer space allows. If there is a hardware source and/or sink that imposes a fixed rate (e.g., 44100 samples/sec for an audio signal, or 10 Msamples/sec for an SDR interface), then that determines the overall processing rate. But if both the source and the sink are implemented purely in software (like a signal generator feeding a time or frequency display), then some form of timing constraint must be imposed in software to limit the processing speed to a specified sampling rate. A special “Throttle” block that we will frequently encounter is used for this purpose. The figure below shows a “Throttle” block connected to the output of the “Signal Source” that we placed earlier. Click on one port follow it by clicking on the other port: this wires the output port of one block to the input port of another block. For the flowgraph to work both ports must use data of the same type (i.e., both ports must be of the same color). If they are of different types, then the arrow of the connection will be red instead of black. It is worth noticing that the word “Throttle” appears in red on the Throttle block, indicating that there is something <em>wrong</em> with this block in the flowgraph. Things that can go wrong are unspecified or undefined parameters or, as is the case above, connections to/from some ports are missing. If you see any red arrows or red writing in a flowgraph you will not be able to run the flowgraph until the offending condition has been fixed.</p>

<p><img src="images/01/img/07.png" alt="throttle blocking" /></p>

<hr />
<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="131-a-cosine-waveform-generator">1.3.1. A Cosine Waveform generator</h3>

<p>For our first experiment we want to generate a real-valued cosine signal with frequency 1000 Hz (default for the “Signal Source”) and display it in the time and frequency domains. We start from a flowgraph which consists of a “Signal Source” connected to a “Throttle”. To make the output of the Signal Source real-valued, double-click on the block and in the Properties window that shows up click on “Complex” under “Output Type” and select “Float” as shown below. Then choose “QT” under “Instrumentation” (or just simply search for “QT GUI Sink”) and double-click on “QT GUI Sink”. This block will allow you to see the waveform at the input in the frequency as well as in the time domain. Change the data “Type” from “Complex” to “Float” and connect the input to the output of the “Throttle” block. Save the flowgraph, e.g., as ex01_1.grc</p>

<p><img src="images/01/img/08.png" alt="Example 1 Flowgraph" /></p>

<p>Now you can run the flowgraph by clicking on the green triangle above the canvas or by clicking “Run” on the menu bar. You can choose between the “Frequency Display” and the “Time Domain Display” tabs as shown below. Use the cursor to zoom in on a rectangular region, increase the FFT size to 4096 or 8192, choose different types of windows, e.g. “rectangular” or “Kaiser” and observe the effects, especially on the Frequency Display. Note that the Frequency Display shows power spectral density (PSD) which is essentially proportional to the magnitude squared of the Fourier transform.</p>

<p><img src="images/01/img/09.png" alt="Example 1 Output Frequency" /> <img src="images/01/img/10.png" alt="Example 1 Output Frequency" /></p>

<h3 id="132-a-cosine-waveform-generator-with-variable-frequency-and-sound">1.3.2. A Cosine Waveform Generator with Variable Frequency and Sound</h3>

<p>We can start from the <code class="highlighter-rouge">ex01_1.grc</code> flowgraph from our first exercise. Under “GUI Widgets” and “QT” select “QT GUI Range”. Double- click on the block so that you get to see its Properties. Change the “ID” from <code class="highlighter-rouge">variable_qtgui_range_0</code> to <code class="highlighter-rouge">f0</code>. For the “Default Value” enter <code class="highlighter-rouge">1000</code>. For the “Start” and the “Stop” values enter <code class="highlighter-rouge">-2000</code> and <code class="highlighter-rouge">2000</code>, respectively. Next we double-click on the “Signal Source” block and change the “Frequency” entry from <code class="highlighter-rouge">1000</code> to <code class="highlighter-rouge">f0</code>. The respective windows look like below:</p>

<p><img src="images/01/img/12.png" alt="signal source default freq" /></p>

<p><img src="images/01/img/11.png" alt="QT Range properties" /></p>

<p>To add a sound output, select “Audio” and then double-click on “Audio Sink”. Connect the “Audio Sink” input to the “Throttle” output and leave the “Sample Rate” at the default value of <code class="highlighter-rouge">samp_rate (32000 samples/sec)</code>.</p>

<p><img src="images/01/img/13.png" alt="Audio sink" /></p>

<p>Save the flowgraph, e.g., as <code class="highlighter-rouge">ex01_2.grc</code>. If you run the flowgraph now you will get a slider for changing the “Signal Source” frequency from <code class="highlighter-rouge">-2000 to +2000 Hz</code>, you will hear the corresponding sound, and you can choose to display the “Frequency” or the “Time Domain” graph.</p>

<p><img src="images/01/img/14.png" alt="GUI out ex01_2" /></p>

<p>Difference between \(+ve\ \&amp;\ -ve\) frequencies?</p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h3 id="133-a-general-waveform-generator">1.3.3. A General Waveform Generator</h3>

<p>In this subsection we shall expand upon the previous exercise and learn how to play around with various useful GNU Radio Companion features.  Let us begin by changing <code class="highlighter-rouge">ex01_2.grc</code> flowgraph by removing the “Audio Sink” and the “QT GUI Sink”. Save this new flowgraph as <code class="highlighter-rouge">ex01_3.grc</code></p>

<p><img src="images/01/img/15.png" alt="GUI start ex01_3" /></p>

<p>We would like to build a waveform generator that can produce real-valued “Cosine”, “Rectangular”, and “Triangular” waveforms with variable frequency and variable dc offset.  To this end we need “QT GUI Range” blocks and a “QT GUI Chooser (from “GUI Widgets” and “QT”). Connect a “QT GUI Time Sink” and a “QT GUI Frequency Sink” (from “Instrumentation” and “QT”) to the output of the “Throttle” Block. Change the input type of the Sink blocks from “Complex” to “Float”. The flowgraph should look like this:</p>

<p><img src="images/01/img/16.png" alt="GUI start ex01_3" /></p>

<p>Now, double-click on the second “QT GUI Range” which will be used to adjust the offset of the waveform and modify the “Properties” as shown below:</p>

<p><img src="images/01/img/17.png" alt="Offset" /></p>

<p>Next, double-click on the “QT GUI Chooser” that will be used to select different waveforms. The (integer) code for “Cosine” is 102, for “Square” it is 103, for “Triangle” it is 104 and for “Sawtooth” it is 105</p>

<p><img src="images/01/img/18.png" alt="Waveform chooser" /></p>

<p>Finally, double-click on the “Signal Source” block and modify the “Properties” to look as follows.</p>

<p><img src="images/01/img/19.png" alt="Waveform properties" /></p>

<p>Double click on the sinks and change to autoscale property to “Yes” respectively. Click the green triangle above the flowgraph or click on “Run” and “Execute” in the GRC menu bar. The output is as below:</p>

<p><img src="images/01/img/20.png" alt="Output 1" /></p>

<p>The arrangement of graphical elements, such as sliders, choosers, time and frequency sinks, etc., used in a GRC flowgraph can be modified by specifying grid positioning arguments in the “GUI Hint” fields of individual blocks. A grid positioning argument is a list of four integers of the form</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>row, column, row span, column span
</code></pre></div></div>

<p>If the “GUI Hint” entry is left blank, then the graphical elements are stacked vertically on top of each other. Otherwise, they are placed in the specified <code class="highlighter-rouge">row</code>  and the specified <code class="highlighter-rouge">column</code>, spanning <code class="highlighter-rouge">row span</code> rows and <code class="highlighter-rouge">col span</code> columns. Note that <code class="highlighter-rouge">rowspan &gt;= 1</code> and <code class="highlighter-rouge">colspan &gt;= 1</code> are required.</p>

<table>
  <thead>
    <tr>
      <th>(0,0)</th>
      <th>(0,1)</th>
      <th>(0,2)</th>
      <th>(0,3)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>(1,0)</td>
      <td>(1,1)</td>
      <td>(1,2)</td>
      <td>(1,3)</td>
    </tr>
    <tr>
      <td>(2,0)</td>
      <td>(2,1)</td>
      <td>(2,2)</td>
      <td>(2,3)</td>
    </tr>
  </tbody>
</table>

<p>We shall rearrange our signal generator with the following GUI Hints</p>

<table>
  <thead>
    <tr>
      <th>Offset Slider (0,0,1,1)</th>
      <th>Waveform Selector (0,1,2,1)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Frequency Slider (1,0,1,1)</td>
      <td>”</td>
    </tr>
    <tr>
      <td>Time Display (2,0,1,1)</td>
      <td>Frequency Display (2,1,1,1)</td>
    </tr>
  </tbody>
</table>

<p>The GUI hints are updated as seen the following dialog boxes:</p>

<p><img src="images/01/img/211.png" alt="GUI Hints" />
<img src="images/01/img/212.png" alt="GUI Hints" />
<img src="images/01/img/213.png" alt="GUI Hints" />
<img src="images/01/img/214.png" alt="GUI Hints" />
<img src="images/01/img/215.png" alt="GUI Hints" /></p>

<p>This give the following Output:</p>

<p><img src="images/01/img/21.png" alt="Output 1_rearranged" /></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="14-gnu-radio-and-python">1.4. GNU Radio and Python</h2>

<p>GNU Radio is written in python and the final code that does the magic is all in Python. Python is very powerful programing language known for its readability and versatility. The flow graphs created in GNU radio companion are converted into a Python script. All the predefined blocks are written in Python and/or C. One can make their own GNU Radio blocks by coding in Python or C. If you want to know how to do this in depth you can click on this guided tutorial <a href="https://wiki.gnuradio.org/index.php/Guided_Tutorial_GNU_Radio_in_Python">here</a></p>

<h3 id="141-arbitrary-function-generation">1.4.1. Arbitrary Function generation</h3>

<p>The fact that the end product and much of the guts of GNU Radio is in Python implied we can exploit the standard library of python or our own scripts to test out several things. We shall look into making any arbitrary wave form. This is useful for testing systems designed in gnuradio</p>

<p>To import a library from python we use the “import” block and we shall employ the “vector source” block to input our arbitrary function. We shall construct a flow graph similar to <code class="highlighter-rouge">ex01_3.grc</code> except we remove the “signal source” and replace with “vector source”, add an “import block” and we shall not worry about the GUI elements for this one. We should have a flowgraph that looks like this:</p>

<p><img src="images/01/img/22.png" alt="vector source" /></p>

<p>We shall import a standard library called <code class="highlighter-rouge">numpy</code>. It allows us to make matrices/vector and manipulate them easily. Double click the import block and fill out the import field as below:</p>

<p><img src="images/01/img/23.png" alt="numpy" /></p>

<p>We shall make a rectangular pulse with variable width <code class="highlighter-rouge">tau</code> going from 0 to 10ms, we establish that range using the “QT GUI Range block”</p>

<p>The function shall be generated shall be generated using the following python code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">tau</span><span class="o">*</span><span class="n">samp_rate</span><span class="p">)),</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">tau</span><span class="p">)</span><span class="o">*</span><span class="n">samp_rate</span><span class="p">))))</span>
</code></pre></div></div>

<p>Before we place our blocks, we need to add consider a “Tag Object” block <sup id="fnref:stream"><a href="#fn:stream" class="footnote">1</a></sup>. It basically helps us synchronize the sinks when the generated <em>stream tag</em> associated with our vector source is stopped by the sink. This will alow us to observe the generated pulse. Vector Source has the “Repeat” field which is set to “Yes” so that the pulse of width tau is repeated periodically. Note the “Tag” field. The properties of the blocks are set as below:</p>

<p><img src="images/01/img/24.png" alt="tau" />
<img src="images/01/img/25.png" alt="tag" />
<img src="images/01/img/26.png" alt="vector" /></p>

<p>We set the sinks to have the trigger mode to “tag” and  enter the “Tag Key”  <code class="highlighter-rouge">t0</code> and change the “Number of Points” in the time sink to “samp_rate” and in the frequency sink to “1024 * 6”. This is to properly visualize the signal and its frequency components.</p>

<p><img src="images/01/img/27.png" alt="timetrigger" />
<img src="images/01/img/28.png" alt="freqtrigger" /></p>

<p>We should then have the flowgraph and output that looks like this:</p>

<p><img src="images/01/img/29.png" alt="ex01_4" />
<img src="images/01/img/30.png" alt="ex01_4_output" /></p>

<p><a href="#">↑ Go to the Top of the Page</a></p>

<h2 id="15-note-on-the-frequency-display">1.5. Note on the Frequency Display</h2>

<p>This particular display may not seem very intuitive for the those seeing it for the first time. It basically shows, as the name suggests, the ‘frequency’ components of the signal. This means the peaks in the graph represents the frequencies of the periodic signals that make up that particular signal. This is the basis of a very important concept called Fourier Analysis. Detailed discussions shall be done in class and systematically demonstrated in <a href="../03">Lab 3</a> and <a href="../05">Lab 5</a></p>

<h2 id="16-exercises">1.6. Exercises</h2>

<ol>
  <li>
    <p><em>Delaying Signals:</em> Use the “delay” block after the signal source and the value of delay can be controlled by a “GUI Range” to make a slider to have the delay change values from 0 to 2000.  See how the the signal changes in a time sink. <strong>NOTE: The delay value indicates the delay in units of number of time samples. Each time sample is</strong> <script type="math/tex">\frac{1}{\verb+samp_rate+} \rm{s}</script></p>
  </li>
  <li>
    <p>GNU Radio has a host of “Math Operators” that will allow you to perform a host of operations:</p>
  </li>
</ol>

<p><img src="images/01/img/31.png" alt="ex01_4_output" />.</p>

<blockquote>
  <p>Use mulitple signal generators from section <a href="#123-a-general-waveform-generator">1.2.3</a> to add and subtract and multiply to form new waveforms.  We’ll add the examples here!</p>
</blockquote>

<h2 id="17-random-discrete-signals">1.7. Random Discrete Signals</h2>

<p>Random signals are signals where the next value can be though of as chips drawn from a hat with many many values, where the exact number of chips with those values relative to each other can be given by an equation, the ‘distribution’.  One of the simplest is a uniform random signal, where each value has an equal number of chips.</p>

<p>In GnuRadio we can create these signals with a ‘Random Uniform Source’ block.<!-- TOC --></p>

<p>A very common distribution in nature is the ‘gaussian’ distribution.</p>

<h2 id="18-sampling">1.8. Sampling</h2>

<p>Sampling can always be though of as the act of pulling the chips out of the hat, and rounding the value on the chip to the nearest integer. When a real signal is digitized by an analog to digital converter (ADC), every clock cycle, the level of the signal is measured and recorded to the nearest value.</p>

<h2 id="19-histograms">1.9. Histograms</h2>

<p>A histogram is a plot of the number of occurrences of the signal that occur between a set of levels chosen.  Plotting the histogram is a way of trying to measure the distribution of an incoming random signal.</p>

<h2 id="110-gnuradio-companion-example">1.10. GnuRadio Companion Example.</h2>

<p>Create the shown GnuRadio flowgraph.<br />
<img src="images/01/img/sampling.png" alt="sampling" /></p>

<p>Use a random source between -10 and 10.  The random source only creates discrete integer values, so you also need and Int to Float block with a ‘scale’ which will multiply the incoming signal by the scale value.</p>

<p>Run the flowgraph, with the scale factor at 1.  What does the time plot look like?  What does the histogram look like?  Now play with the scale factor.  Can the histogram have large gaps? Can you make the histogram look continuous?  What intuition do you gain from this about sampling a ‘random’ signal?</p>

<p>Now also try different distribution sources.  Use the “Noise Source” block and set it to a gaussian distribution.  What does the time stream look like?  What about the histogram?</p>

<p>Now again use a cosine input signal as you’ve used in a previous exercise.  What does the time series look like?  The histogram?  A cosine signal is not very random.  What if instead, each measured point in time of the cosine was completely randomized (could also think of using a uniform random signal put through a cosine function)?  Would the histogram look any different?  This would also be a random signal, and has the functional form <script type="math/tex">\frac{A}{\sqrt{1-y^2}}</script>, which should agree with your histogram.</p>

<h2 id="111-make-your-own-gaussian-noise-block">1.11. Make your own gaussian noise block</h2>

<p>You are now ready to try to make your own gaussian noise block out of other blocks.</p>

<p>Create a new flowgraph in grc.
 We’ll start by using a just a QLFSR block.  This is a ‘linear feedback shift register’  block, which is a very simple way to create ‘pseudorandom’ noise.  Look <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">here</a> for more details.  Set the type to float, the degree (how many elements in the shift register) to 32, repeat yes.  Change the seed to any number.  Leave the ‘mask’ at zero to get an ‘optimal’ source that wont repeat.  Try using other numbers to compare, 1075838979 is a nice choice for random looking data.  Use a histogram sink and a gui sink to look at the output.  Even though the output is only -1 or 1, without knowing the initial seed and how many cycles have gone by, the answer is random.</p>

<p>Add a number of these sources together:
 <img src="images/01/img/lfsr_noise.png" alt="gaussian" /></p>

<p>What does the output look like now?  This is one of the simple ways of going from a ‘flat’ random number to a gaussian white noise.</p>

<p><a href="#">↑ Go to the Top of the Page</a> ……<a href="../02">Next Lab</a></p>

<hr />

<p>Extra Materials:</p>

<ul>
  <li><a href="https://wiki.gnuradio.org/index.php/Guided_Tutorial_GRC">A guided tutorial by gnuradio</a></li>
  <li>this tutorial has been adapted from this <a href="http://ecee.colorado.edu/~mathys/ecen4652/labs.html">lab</a></li>
</ul>
<div class="footnotes">
  <ol>
    <li id="fn:stream">
      <p>For a technical explaination of the block <a href="https://gnuradio.org/doc/doxygen/page_stream_tags.html">click here</a> <a href="#fnref:stream" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsplab-intro/</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of labs using GNURadio
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Digital Signal Processsing</title>
                <link>http://localhost:4000/dsp</link>
                <content:encoded>
                    <![CDATA[
                    <h1 id="dsp-lectures">DSP Lectures</h1>

<table>
  <thead>
    <tr>
      <th>Lectures</th>
      <th>Demonstrations</th>
      <th>Laboratory Exercises</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/4ff26b2d1e334c199f9644f7c21f4f8d1d">Introduction to Signals</a></td>
      <td>1. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/3a1842a284284aa5b08b533e3af825b71d">Sampling</a> <br />2. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/040268aefe154838a6b16d5890a526331d">Mixing</a> <br />3. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/ac80f7e2da8a4bf5856d7a1fa61053361d">Mixing (Frequency)</a> <br /> 4. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/8de0d7fd64784c239f6b94b14161218e1d">Histograms</a></td>
      <td>1. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/1150c64dea0e41e5823ad63496e629d71d">Installing GNU Radio</a> <br /> 2. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/b3ab05640dee404bb30f9b84f2d25afd1d">Getting Started with GNU Radio</a> <br /> 3. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/4d9cf034b5d1473b9467f69a15e1fcd31d">Making your first GNU Radio program</a> <br /> 4. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/3d2c6810d9b847c19b087c23e521f26b1d">Best GNURadio Practices</a> <br /> 5. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/622949d398ef4d55be1e6ea19845b3071d"> Beautify your GNURadio GUI</a></td>
    </tr>
    <tr>
      <td>1. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/bf73dba28e29455f9a966ce64f94042a1d">Periodic and Non-Periodic Signals Fourier Series</a>  <br /> 2. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/d9adb334770a49e089a77f7b0a70dea31d">Fourier Series</a>	<br /> 3. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/1d689eed4e1740d4b48dd7cc902e33281d">Frequency Content of Non-Periodic Signals</a> <br /> 4. <a href="https://youtu.be/r6sGWTCMz2k">Fourier Analysis - External Youtube Video</a></td>
      <td>1. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/2407d3c94138460894e4357070b576281d">Fourier Analysis in GNU Radio</a> <br /> 2. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/057d930e6e1a4bb2ac80c6752b748e751d">Fourier Analysis - another Demo</a> <br /> 3. <a href="http://www.jezzamon.com/fourier/">A Fourier Transforms Explainer - external website</a> <br /> 4. <a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/b85fac1246f4498da147cbc12fc5e0181d">Real Signals</a></td>
      <td><a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/d2ae73260b124113aecdce7c63755c451d">The FFT Block</a></td>
    </tr>
    <tr>
      <td><a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/6aea73645b554d3099a5e32831d445a01d">Filters</a></td>
      <td><a href="https://mediasitecs.lib.wvu.edu/Mediasite1/Play/761f9a7aecd14a949ae7a67224345fe41d">Filters GNURadio Demo</a></td>
      <td> </td>
    </tr>
  </tbody>
</table>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/dsp</guid>
                <description>
                    
                    A deep dive into Digital Signal Processing through a series of lectures and demonstrations
                    
                </description>
                <pubDate>Fri, 14 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>How to Install Ubuntu 20.04 with spectrometer_w_cal.grc on Bootable Flashdrive</title>
                <link>http://localhost:4000/Install_Ubuntu_spectrometer_onFlashdrive</link>
                <content:encoded>
                    <![CDATA[
                    <h4 id="how-to-install-ubuntu2004gnuradio38spectrometer_w_calgrc-on-a-bootable-flashdrive">How to Install Ubuntu20.04/Gnuradio3.8/spectrometer_w_cal.grc on a Bootable Flashdrive</h4>

<ol>
  <li>
    <p>Before starting, you will need the program <em>balenaEtcher</em>, which is an easy-to-use cross-platform tool for burning images to SD cards, USB drives and other removable devices. It can be downloaded from https://www.balena.io/etcher/.</p>
  </li>
  <li>
    <p>Download the file <a href="https://drive.google.com/file/d/1coOjDiu2bStTXmbzjN3DtGWiOAAG5scW/view?usp=sharing">ubuntu_radio_astro20202.iso.zip</a> while in either Windows or Ubuntu.</p>
  </li>
  <li>
    <p>Unzip this file in a folder of your choice to create the file <em>ubuntu_radio_astro20202.iso</em></p>
  </li>
  <li>
    <p>Install a 32 GB or larger flash drive in the usb port. [We recommend a Samsung 32 GB flash drive.]</p>
  </li>
  <li>
    <p>Run <em>balenaEtcher</em>. Choose the file <em>ubuntu_radio_astro20202.iso</em> as the image and the flash drive as the target.</p>
  </li>
  <li>
    <p>The <strong>Ubuntu with spectrometer_w_cal.grc</strong> image should now be on this bootable flashdrive.</p>
  </li>
</ol>

<h4 id="how-to-run-gnuradio-and-the-spectrometer_w_calgrc-program-from-the-flashdrive">How to Run Gnuradio and the spectrometer_w_cal.grc program from the flashdrive.</h4>

<ol>
  <li>
    <p>To run Gnuradio and the <em>spectrometer_w_cal.grc</em> program, place the bootable flash drive in a USB port.</p>
  </li>
  <li>
    <p>Start or reboot the computer. While it is starting, hold down the bootable key (F12) to pull up a menu of boot options.</p>
  </li>
  <li>
    <p>Scroll down to the flashdrive and hit enter.</p>
  </li>
  <li>
    <p>On the first installation screen, choose <strong>run Ubuntu persistent live</strong> (the choice at the top). IT MAY TAKE A FEW MINUTES FOR THE SYSTEM TO BOOT UP, DEPENDING ON THE FLASHDRIVE USED. BE PATIENT!</p>
  </li>
  <li>
    <p>Open a Terminal by selecting the terminal icon on the left menu bar.</p>
  </li>
  <li>
    <p>Type and enter <code class="highlighter-rouge">gnuradio-companion</code> at the prompt.</p>
  </li>
  <li>
    <p>The <em>spectrometer_w_cal.grc</em> program should open.</p>
  </li>
  <li>
    <p>NOTE: When the save/write to file buttons are hit, the data files are written to the Spectra folder.</p>
  </li>
  <li>
    <p>NOTE: The system clock time defaults to UTC/London. Change it if needed.</p>
  </li>
  <li>
    <p>Enjoy radio astronomy observations!</p>
  </li>
</ol>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/Install_Ubuntu_spectrometer_onFlashdrive</guid>
                <description>
                    
                    Instructions for copying the Ubuntu/spectrometer_w_cal image on a bootable flashdrive
                    
                </description>
                <pubDate>Fri, 07 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Making Waves with Fourier Series</title>
                <link>http://localhost:4000/MakingWavesFourier</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://docs.google.com/document/d/15jXZiNi-5c7DPsuN7TeNhTUL93faWo4_k8ZufcIDNSY/edit?usp=sharing/dotcom">Making Waves with Fourier Series</a></p>

<p><a href="/dspira-lessons/images/Fourier_Series_Wave_Explorer.grc">GNURadio .grc file for Fourier Activity</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/MakingWavesFourier</guid>
                <description>
                    
                    Students make complex waves by adding various sine cosine waves
                    
                </description>
                <pubDate>Wed, 05 Aug 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Software Needs for Running the Horn Telescope</title>
                <link>http://localhost:4000/BuildingHorn_SoftwareInfo</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="installing-the-software-needed-to-run-the-spectrometer-on-a-computer-that-is-using-ubuntu-2004">Installing the Software Needed to Run the Spectrometer on a Computer That is Using Ubuntu 20.04</h2>

<p>Complete the following steps as needed:</p>

<h4 id="a-how-to-partition-a-hard-drive-for-ubuntu-2004-alongside-windows-10">A. How to Partition a Hard Drive for Ubuntu 20.04 Alongside Windows 10</h4>

<ol>
  <li>
    <p><a href="http://releases.ubuntu.com/20.04/">Download Ubuntu Desktop 20.04 ISO onto hard drive in Windows.</a> You want to choose the Desktop version. It will take some time to download this file.</p>
  </li>
  <li>
    <p>Install a 32 GB or larger flash drive in the usb port.</p>
  </li>
  <li>
    <p>Download <em>BalenaEtcher</em> for Windows and install it if you don’t already have it.</p>
  </li>
  <li>
    <p>Run <em>BalenaEtcher</em>. Choose the Ubuntu20.04.iso file as the image and the flash drive as the target. It will take some time for this to run.</p>
  </li>
  <li>
    <p>Before installing Ubuntu on the hard disk, you need to partition the hard disk in Windows.</p>

    <p>Open a Command Prompt window with admin rights:</p>
    <ul>
      <li>In the Cortana search field, type in <code class="highlighter-rouge">Command Prompt</code>, or just CMD.</li>
      <li>Right click the top result, and select <code class="highlighter-rouge">Run as Administrator</code>.</li>
      <li>Click <code class="highlighter-rouge">Yes</code> on the popup to allow the app to make changes to your device.</li>
    </ul>
  </li>
  <li>
    <p>Enter the command <code class="highlighter-rouge">diskmgmt.msc</code> to open the Disk Management utility.</p>
  </li>
  <li>
    <p>Select the Windows partition, usually the C: volume. Right-click on this partition and select the <code class="highlighter-rouge">Shrink Volume</code> option in order to reduce the partition size.</p>
  </li>
  <li>
    <p>Wait for the system to collect partition size data; then add the desired amount of space you want to shrink, and hit in the ‘Shrink’ button. The partition size to shrink by (which is the amount that will be allotted to Ubuntu) should be a minimum of 50 GB, and we recommend 100 GB or more, depending on the size of your hard drive.</p>
  </li>
</ol>

<p>After the shrink process completes, a new unallocated space will be present in your drive. We’ll use this free space to install Ubuntu alongside Windows</p>

<h4 id="b-install-ubuntu-2004-alongside-with-windows">B. Install Ubuntu 20.04 Alongside with Windows</h4>

<ol>
  <li>
    <p>Place the bootable flash drive in the USB port, and reboot the machine, holding down the bootable key (F12) in order to boot from the Ubuntu USB bootable image.</p>
  </li>
  <li>
    <p>On the first installation screen, select <code class="highlighter-rouge">Install Ubuntu</code> and hit Enter to start the installation process. This will complete the installation process, unless an error message appears.</p>
  </li>
  <li>
    <p>IF AN ERROR APPEARS REGARDING DEVICE ENCRYPTION, you probably need to disable device encryption in Windows. This is known as Bitlocker. To disable it, complete the following:</p>

    <ul>
      <li>For most Windows systems, the following can be followed to turn off encryption:
        <ul>
          <li>Boot up the computer in Windows.</li>
          <li>Open <code class="highlighter-rouge">Settings</code>.</li>
          <li>Click on <code class="highlighter-rouge">Update &amp; Security</code>.</li>
          <li>Click on <code class="highlighter-rouge">Device encryption</code>.</li>
          <li>Under the “Device encryption” section, click the <code class="highlighter-rouge">Turn off</code> button.</li>
          <li>Wait until Windows 10 has completed un-encrypting the hard drive before you turn off Windows 10 and start the disk boot and Ubuntu install.</li>
        </ul>
      </li>
      <li>
        <p>For some Windows 10 Home system, the Bitlocker or Device encryption is not visible. Complete the following to turn off encryption from a command line.</p>

        <ul>
          <li>
            <p>In Windows from the <code class="highlighter-rouge">Start Menu</code>, click the <code class="highlighter-rouge">Windows PowerShell</code> folder and tap <code class="highlighter-rouge">Windows PowerShell</code>.</p>
          </li>
          <li>
            <p>A command line window will open up. From the Powershell command line, type <code class="highlighter-rouge">Disable-BitLocker -MountPoint C:</code> and hit Enter.</p>
          </li>
        </ul>
      </li>
      <li>Another option for systems with Windows 10 Home is the following:
        <ul>
          <li>In the <code class="highlighter-rouge">Start Menu</code> search box, type <code class="highlighter-rouge">Services</code>. Then scroll to <code class="highlighter-rouge">Bitlocker</code>.</li>
          <li>Open it, or view its <code class="highlighter-rouge">Properties</code>, and then <code class="highlighter-rouge">Disable</code> it.</li>
        </ul>
      </li>
      <li>After disabling the encryption in Windows, repeat steps 1 and 2 above. Be sure to wait until Windows 10 has completed un-encrypting the hard drive before you turn off Windows 10 and start the disk boot and Ubuntu install.</li>
    </ul>
  </li>
</ol>

<h4 id="c-install-gnuradio">C. Install Gnuradio</h4>

<ol>
  <li>
    <p>Open a terminal window.</p>
  </li>
  <li>
    <p>Type and enter <code class="highlighter-rouge">sudo apt update</code></p>
  </li>
  <li>
    <p>Type and enter <code class="highlighter-rouge">sudo apt upgrade</code></p>
  </li>
  <li>
    <p>Type and enter <code class="highlighter-rouge">sudo apt install gnuradio</code></p>
  </li>
  <li>
    <p>You may need to respond ‘Y’ to a few prompts before installation is complete.</p>
  </li>
</ol>

<h4 id="d-install-gr-radio_astro">D. Install gr-radio_astro</h4>

<p>This will install the spectrometer program <em>spectrometer_w_cal.grc</em>.</p>

<ol>
  <li>
    <p>Open a terminal window in Ubuntu.</p>
  </li>
  <li>
    <p>Install gnuradio external python dependencies and SDR drivers by typing the following:
<code class="highlighter-rouge">sudo apt install gnuradio gr-osmosdr airspy python3-h5py python3-ephem</code>, and hit Enter.</p>
  </li>
  <li>
    <p>Also install the following package: <code class="highlighter-rouge">sudo apt install git cmake liborc-0.4-dev</code></p>
  </li>
  <li>
    <p>To clone the repository: in the terminal, type and Enter: <code class="highlighter-rouge">git clone https://github.com/WVURAIL/gr-radio_astro.git</code></p>
  </li>
  <li>
    <p>Switch to the gr-radio_astro directory: <code class="highlighter-rouge">cd gr-radio_astro</code></p>
  </li>
  <li>
    <p>Switch to the gr-radio_astro 3.8 branch by typing: <code class="highlighter-rouge">git checkout gr38</code></p>
  </li>
  <li>
    <p>Make a build directory: <code class="highlighter-rouge">mkdir build</code>, and then move to it: <code class="highlighter-rouge">cd build</code></p>
  </li>
  <li>
    <p>Then run the following in the build directory:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake ..
sudo make
sudo make install
</code></pre></div>    </div>
    <p><strong>Additional Steps for setting the proper Python environment:</strong></p>
  </li>
  <li>
    <p>Open a terminal window.</p>
  </li>
  <li>
    <p>Make sure you are at the home directory (type and Enter <code class="highlighter-rouge">cd</code> ). Then type <code class="highlighter-rouge">gedit .bashrc</code> to open the <em>.bashrc</em> file in an editor.</p>
  </li>
  <li>
    <p>Scroll to the very bottom of this file, add a blank line, and then copy and paste the following code: <code class="highlighter-rouge">export PYTHONPATH=/usr/local/lib/python3/dist-packages:/usr/local/lib/python3.8/dist-packages:$PYTHONPATH</code></p>
  </li>
  <li>
    <p>Save and close (x in upper right corner).</p>
  </li>
  <li>
    <p>Go to the following by typing: <code class="highlighter-rouge">cd /usr/local/lib/python3.8/dist-packages</code></p>
  </li>
  <li>
    <p>Enter <code class="highlighter-rouge">ls</code></p>
  </li>
  <li>
    <p>If the folder <code class="highlighter-rouge">radio_astro</code> exists, delete it by typing: <code class="highlighter-rouge">sudo rm -rf radio_astro</code> . If nothing shows up after typing <code class="highlighter-rouge">ls</code>, then everything is fine.</p>
  </li>
</ol>

<p><strong>Check that the Installation was Successful</strong></p>

<ol>
  <li>Run the program in Gnuradio:
    <ul>
      <li>In a terminal window type <code class="highlighter-rouge">gnuradio-companion</code></li>
      <li>
        <p>Open the <em>spectrometer_w_cal.grc</em> program as follows:</p>

        <p><code class="highlighter-rouge">File --&gt; Open --&gt; gr-radio_astros --&gt; examples --&gt; *spectrometer_w_cal.grc* </code></p>
      </li>
      <li>Plug an Airspy radio, with the LNA attached, into the USB port. Run the program by hitting the start triangle (“execute the flowgraph”) on the menu bar at top. If no errors occur, you are all set!</li>
    </ul>
  </li>
</ol>

<h4 id="e-how-to-update-files-from-the-gr-radio_astro-gr38-repository">E. How to Update files from the gr-radio_astro gr38 Repository</h4>

<ol>
  <li>
    <p>Switch to the <em>gr-radio_astro</em> folder on your computer: <code class="highlighter-rouge">cd gr-radio_astro</code></p>
  </li>
  <li>
    <p>To check to see if you are in the gr38 branch, enter <code class="highlighter-rouge">git status</code>. The descriptor “On branch gr38” should appear at the top of the displayed text.</p>

    <p>To switch to the gr38 branch, type <code class="highlighter-rouge">git checkout gr38</code>. Then type <code class="highlighter-rouge">git status</code> to check.</p>
  </li>
  <li>
    <p>Type <code class="highlighter-rouge">git pull</code>. This should update your gr-radio_astro files on your computer.</p>
  </li>
  <li>
    <p>Run the <em>spectrometer_w_cal.grc</em> program in Gnuradio:</p>
    <ul>
      <li>In a terminal window type <code class="highlighter-rouge">gnuradio-companion</code></li>
      <li>Close any pre-existing <em>spectrometer_w_cal.grc</em> program that may already be loaded in the Gnuradio program.</li>
      <li>
        <p>Open the new <em>spectrometer_w_cal.grc</em> program that is in the updated gr-radio_astro folder:</p>

        <p><code class="highlighter-rouge">File --&gt; Open --&gt; gr-radio_astros --&gt; examples --&gt; spectrometer_w_cal.grc</code></p>
      </li>
      <li>Make sure an Airspy radio is plugged into a USB port. Execute the program to check that it is updated successfully.</li>
    </ul>
  </li>
</ol>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/BuildingHorn_SoftwareInfo</guid>
                <description>
                    
                    Details of software installation needed for a horn telescope
                    
                </description>
                <pubDate>Tue, 28 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Tools for Observational Astronomy</title>
                <link>http://localhost:4000/ObserveTools</link>
                <content:encoded>
                    <![CDATA[
                    <p>The ultimate goal of the DSPIRA Astronomy Lessons Module is to give the teachers and students an opportunity to actually make observations in the sky using the DSPIRA Radio Horn Telescope.  If you are starting from ground zero in this discipline, then they will need to develop some basic tools, whether it is where to look in your hometown skies, to understanding what electromagnetic radiation is and what can we learn from it.</p>

<h3 id="click-here-for-a-complete-document-of-teachers-notes-for-this-whole-activity-sequence">Click here for a complete document of <a href="https://docs.google.com/document/d/1ml9wJJ3wSbEf1A7UIMpiVHuxSqeQe7dbE3UrJ_Wq-hk/edit?usp=sharing">Teacher’s Notes</a> for this whole activity sequence</h3>

<p><strong><em>Activity List</em></strong></p>
<ol>
  <li>Introduction to the ElectroMagnetic Spectrum</li>
  <li>The Doppler Effect</li>
  <li>Understanding Celestial Coordinate Systems</li>
  <li>Observing Celestial Coordinate Systems using Stellarium</li>
  <li>Introduction to Radio Astronomy</li>
</ol>

<p>The first two activities center around the Nature of Light…</p>

<h2 id="1-introduction-to-the-electromagnetic-spectrum">1. Introduction to the ElectroMagnetic Spectrum</h2>

<p>This is an introductory activity to get the students to dig around the internet to fill out information on the full EM Spectrum.</p>

<h6 id="-click-for-link-to-intro-to-the-em-spectrum-page">&gt; Click for link to <a href="https://drive.google.com/file/d/1iS-GHQtLvbfvYz1GLT67Ofp9SjeH1XYB/view?usp=sharing">Intro to the EM Spectrum</a> page</h6>

<h3 id="intro-video-to-the-importance-of-spectroscopy">Intro Video to the Importance of Spectroscopy</h3>
<p><em>To get to main point, go to time 7:13 on the video</em></p>

<p>https://www.youtube.com/watch?v=jjy-eqWM38g&amp;feature=youtu.be&amp;t=433</p>

<h2 id="2-the-doppler-effect">2. The Doppler Effect</h2>

<p>Doppler Effect lessons and activities are common, but this DSPIRA lesson actually uses data received by DSPIRA teachers using radio telescopes.</p>

<h6 id="-click-for-link-to-the-doppler-effect">&gt; Click for link to <a href="https://drive.google.com/file/d/1gbDCY0ZIlvnDZP1k5oq9_Hr0P6gqWSqr/view?usp=sharing">The Doppler Effect</a></h6>

<h2 id="3-understanding-celestial-coordinate-systems">3. Understanding Celestial Coordinate Systems</h2>

<p>The next activities are to help the user get familiar with how we divide up the sky into different coordinate systems, and how we can use our location and knowledge of the coordinate systems to find our way around the sky for making observaations.</p>

<h6 id="student-activity-document"><a href="https://docs.google.com/document/d/1hlc1SBIF0k_CGa8UhYB3Bi1jVJp1-mBKM7ouzOqZ1gY/edit?usp=sharing">Student Activity Document</a></h6>

<h6 id="teacher-notes"><a href="https://docs.google.com/document/d/1JVFn5d4mhCN-fU2JmSMRD95g3N5xwSbFM94TUpAUe3k/edit?usp=sharing">Teacher Notes</a></h6>

<p>The following are videos from Dr. Loren Anderson from West Virginia University’s Astronomy department.<br />
They are short clips from the his 2nd lecture given to the DSPIRA Teachers during July 2019.</p>

<h6 id="intro-to-motion-in-the-sky"><a href="https://www.youtube.com/watch?v=wUNDoUoDrCg" class="button">Intro to Motion in the Sky</a></h6>

<h6 id="the-celestial-sphere"><a href="https://www.youtube.com/watch?v=d8BcwK5nlos" class="button">The Celestial Sphere</a></h6>

<h6 id="earths-motion-and-star-trails"><a href="https://www.youtube.com/watch?v=_L1R1VnMeD4" class="button">Earth’s Motion and Star Trails</a></h6>

<h6 id="more-celestial-sphere"><a href="https://www.youtube.com/watch?v=UpYt7238p5g" class="button">More Celestial Sphere</a></h6>

<h6 id="discussion-of-common-misconceptions"><a href="https://www.youtube.com/watch?v=nfonuosoHUk" class="button">Discussion of Common Misconceptions</a></h6>

<h2 id="4-observing-celestial-coordinates-using-stellarium">4. Observing Celestial Coordinates using Stellarium</h2>

<p>This activity is a nice introduction to using the Stellarium Web Online planetarium program</p>

<h6 id="-click-here-for-student-activity-document">&gt; Click here for <a href="https://drive.google.com/file/d/1T441BW8rz3_bVgKN_bKK-ivfudXhQwFa/view?usp=sharing">Student Activity Document</a></h6>

<h6 id="-click-here-for-teacher-notes-document">&gt; Click here for <a href="https://docs.google.com/document/d/1_rUbPuXiTXhHVkVDIOzbh-0F8xSCeMn5sbd4OHJzIrg/edit?usp=sharing">Teacher Notes Document</a></h6>

<h6 id="-a-tutorial-video-using-stellarium-online">&gt; A tutorial video <a href="https://www.youtube.com/watch?v=ApKA6kWlFuQ">Using Stellarium Online</a></h6>

<h2 id="5-introduction-to-radio-astronomy">5. Introduction to Radio Astronomy</h2>

<p>If you are going to continue on with the DSPIRA Experience, then this is a great <a href="https://www.youtube.com/watch?v=-UrzmAa62ho">Introduction video to Radio Astronomy</a> created by MIT students.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/ObserveTools</guid>
                <description>
                    
                    The Radio Horn works best with the Milky Way, so let's learn about it
                    
                </description>
                <pubDate>Mon, 27 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>What is a Horn Telescope?</title>
                <link>http://localhost:4000/HornTelescope_IntroVideo</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://youtu.be/uzYvv4nwndM" class="button">Introductory Video: What is a Horn Telescope?</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornTelescope_IntroVideo</guid>
                <description>
                    
                    Overview of what makes up a horn telescope and what it detects
                    
                </description>
                <pubDate>Mon, 27 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Instructions on How to Build a Horn Telescope</title>
                <link>http://localhost:4000/BuildingHornTelescope_Instructions</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://drive.google.com/file/d/1qdc5lhKErFyIsc8b52ZIkCPJLi-XykSb/view?usp=sharing" class="button">Instructions on How to Build a Horn Telescope</a></p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/BuildingHornTelescope_Instructions</guid>
                <description>
                    
                    details on how to build a horn telescope
                    
                </description>
                <pubDate>Mon, 27 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>How to Calibrate the Horn Telescope</title>
                <link>http://localhost:4000/HornOperation_Calibration</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://youtu.be/r8iYuaiFOd8" class="button">Instructional video</a></p>

<p><a href="https://youtu.be/r8iYuaiFOd8"><img src="/dspira-lessons/images/CHIME_dishes.jpg" width="400" height="300" /></a></p>

<h4 id="some-preliminary-pointers">Some preliminary pointers:</h4>

<ul>
  <li>
    <p>For the best results, after starting the program, allow the system to warm up for approximately 20 minutes before calibrating.</p>
  </li>
  <li>
    <p>Re-calibrations can be done any time during a viewing session.</p>
  </li>
  <li>
    <p>For consistency, it is recommended to re-calibrate occasionally during a viewing session.</p>
  </li>
</ul>

<h4 id="procedure">Procedure</h4>

<ol>
  <li>
    <p>Point the telescope toward the ground at an angle. The video shows how this is done.</p>
  </li>
  <li>
    <p>Switch the <code class="highlighter-rouge">Spectrum Display</code> to <code class="highlighter-rouge">Hot Calibration</code>.</p>
  </li>
  <li>
    <p>Select the <code class="highlighter-rouge">Time Integration</code> to <code class="highlighter-rouge">Long Integration</code>.</p>
  </li>
  <li>
    <p>Watch the spectrum displayed. You may need to change the <code class="highlighter-rouge">ymax</code> value to view all of the signal on the graph. Wait for the graph to settle to a steady display. Then switch the <code class="highlighter-rouge">Spectrum Display</code> to <code class="highlighter-rouge">Cold Calibration</code>. DO NOT MOVE THE TELESCOPE UNTIL THE SPECTRUM DISPLAYED HAS BEEN CHANGED TO <code class="highlighter-rouge">Cold calibration</code>.</p>
  </li>
  <li>
    <p>Switch the display to <code class="highlighter-rouge">Cold Calibration</code> and the integration to <code class="highlighter-rouge">Short Integration</code>.</p>
  </li>
  <li>
    <p>Point the telescope at open sky. Continue to re-direct it until you find a patch of sky that does not show any hydrogen peak near 1420.4 MHz. After doing so, switch to <code class="highlighter-rouge">Long Integration</code>.</p>
  </li>
  <li>
    <p>Wait for the graph to settle to a steady display. Then switch the <code class="highlighter-rouge">Spectrum Display</code> to <code class="highlighter-rouge">Spectrum with Calibration</code>.  DO NOT MOVE THE TELESCOPE UNTIL THE SPECTRUM DISPLAYED HAS BEE CHANGED TO <code class="highlighter-rouge">Spectrum with calibration</code>.</p>
  </li>
  <li>
    <p>The spectrometer is now calibrated, and the graph should now be showing only signals from the galaxy.</p>
  </li>
</ol>

<h4 id="some-more-things-to-note">Some More Things to Note:</h4>

<ul>
  <li>
    <p>After completing a calibration, the signal is in units of Kelvin (K). This sounds odd, but it is how radio astronomers quantify radio signals.</p>
  </li>
  <li>
    <p>For most amateur applications, it is not necessary to get bogged down trying to understand why the units are Kelvin.</p>
  </li>
  <li>
    <p>After completing a calibration, the baseline signal would theoretically be steady at approximately 10 K, which is the approximate temperature of empty space. However, in reality, the base level after calibration will fluctuate. This is due to several factors, but it is mostly due to the LNA because its temperature will fluctuate some over the span of a viewing session.</p>
  </li>
  <li>
    <p>The background level can actually go negative! No need to worry. Re-calibrating usually takes care of this and brings the base level back up to approximately 20 K.</p>
  </li>
  <li>
    <p>The value of the background level will not affect any peak positions or shapes.</p>
  </li>
  <li>
    <p>Even though the background level might not stay the same, the calibrated spectrum can still be used for quantitative analysis by offsetting the data so that the background level is zero. This is typically what is done when analyzing the area of the peaks.</p>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornOperation_Calibration</guid>
                <description>
                    
                    The procedure for calibrating the telescope using the spectrometer_w_cal program is outlined.
                    
                </description>
                <pubDate>Sun, 26 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Running the Spectrometer Program</title>
                <link>http://localhost:4000/HornOperation_runningSpectrometer</link>
                <content:encoded>
                    <![CDATA[
                    <h2 id="using-the-systemp_w_calibrationgrc-program">Using the <em>systemp_w_calibration.grc</em> Program</h2>

<p>The video shown <a href="https://youtu.be/50B2Uv-SoDY">here</a> explains the features in this program.</p>

<h3 id="1-before-starting-the-program">1.	Before Starting The Program</h3>

<p>The video <a href="https://youtu.be/Oo28QCEZe_g">here</a> explains how set up the horn and make adjustments to the user-defined settings referred to below.</p>

<ul>
  <li>
    <p>Check the user-defined settings illustrated below. These are the <code class="highlighter-rouge">Variable</code> blocks in the upper right corner of the Gnuradio canvas.</p>

    <p><img src="/dspira-lessons/images/UserDefinedBlocks.png" alt="User-defined blocks" /></p>

    <ul>
      <li>
        <p>To change a value, double click on the box and then type the value in the Value box and hit OK.</p>
      </li>
      <li>
        <p><code class="highlighter-rouge">integration_time1</code> is the short integration time, and <code class="highlighter-rouge">integration_time2</code> is the long integration time. These can be changed to any value at 0.4 s or above.</p>
      </li>
      <li>
        <p>Be sure that the file path in the <code class="highlighter-rouge">prefix</code> box is correct. This is the folder where the data files will be saved.</p>

        <p>Hints on setting the file path correctly:
(These steps are explained in the <a href="https://youtu.be/Oo28QCEZe_g">setting up the horn video</a>.)</p>
        <ol>
          <li>Open the File Navigation window (folder icon).</li>
          <li>Navigate to the folder to which you want to save the spectrum files.</li>
          <li>Right click on the folder.</li>
          <li>Select <code class="highlighter-rouge">Properties</code>.</li>
          <li>Double click the <code class="highlighter-rouge">Parent folder:</code> path and copy it to the clipboard.</li>
          <li>In the <code class="highlighter-rouge">prefix</code> variable box paste the path name inside quotes in the <code class="highlighter-rouge">Value</code> box. (Delete any existing path name.)</li>
          <li>
            <p>Then append the actual folder name to the end of the parent path. Be sure to separate folder names with / and end with /.</p>

            <p>EXAMPLE:</p>

            <p>Parent folder: <code class="highlighter-rouge">home/Jansky/radio_astronomy</code></p>

            <p>data folder name: <code class="highlighter-rouge">horn_data_2020</code></p>

            <p>Value to put into the <code class="highlighter-rouge">prefix</code> variable box: <br />
“home/Jansky/radio_astronomy/horn_data_2020/”
(Include the quotes)</p>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    <p>CAUTION: If you run the program on a laptop without the power cord plugged in, the computer may go into a sleep mode and stop running the program, depending on the length of the run. Change the power settings on your computer so that it never suspends or goes to sleep.</p>
  </li>
</ul>

<h3 id="2-after-starting-the-program">2.	After Starting The Program</h3>

<ul>
  <li>The first screen that appears looks like the following:</li>
</ul>

<p><img src="/dspira-lessons/images/filtered_nocal.png" alt="Opening screen" /></p>

<ul>
  <li>
    <p>This display is used for most observations that are uncalibrated.</p>
  </li>
  <li>
    <p>Adjust the <code class="highlighter-rouge">ymin</code> and <code class="highlighter-rouge">ymax</code> values to scale the graph as desired.</p>
  </li>
  <li>
    <p>Fill in the <code class="highlighter-rouge">azimuth</code>, <code class="highlighter-rouge">elevation</code>, and <code class="highlighter-rouge">location</code>, if desired. <strong>NOTE: When entering these values, you must hit ENTER after each entry in order for it to get recorded by the program.</strong></p>
  </li>
</ul>

<p>These parameters are included in the title, as described in the <em>Saving a Spectrum to a Data File</em> section below. This is also demonstrated in the <a href="https://youtu.be/dWX0rRU99Z8">video on how to save data</a>.</p>

<ul>
  <li>
    <p>The <code class="highlighter-rouge">Short Integration</code> option is good for quick observations and demonstrations. Switch to <code class="highlighter-rouge">Long Integration</code> for smoother data when a pointing is settled on and you are ready for a longer run.</p>
  </li>
  <li>
    <p>The <code class="highlighter-rouge">Clipped Spectrum</code> is the better selection for most viewings. The <code class="highlighter-rouge">Full Spectrum</code> is good for demonstrating how the signal processing affects the spectrum. It also might be useful for the expert user who wants the full spectrum for some reason.</p>
  </li>
</ul>

<h3 id="3-saving-a-spectrum-to-a-data-file-see-the-video-on-how-to-save-data">3.	Saving a Spectrum to a Data File <a href="https://youtu.be/dWX0rRU99Z8">See the video on how to save data</a></h3>

<ul>
  <li>
    <p>The spectrum that is currently being displayed on the screen can be written to a .csv data file by clicking the <code class="highlighter-rouge">Capture Current Spectrum</code> button. The data file is written to the folder under the path in the <code class="highlighter-rouge">prefix</code> Variable box.</p>
  </li>
  <li>
    <p>When <code class="highlighter-rouge">Writing to file</code> is selected under the <code class="highlighter-rouge">Write to csv File</code> window, a data file will be written to a new file in the data folder each time an integration time elapses. For instance, if Long Integration is selected and is 10 s, then every 10 s a new file is written. So for a 20 minute run, a total of 120 files will be written to the data folder.</p>
  </li>
</ul>

<p>This option is useful when running a drift scan or for when the user sets the telescope to collect data at a later time when the user is not able to be present.</p>

<ul>
  <li>Data File Format:
    <ul>
      <li>
        <p>The .csv format is a .txt data file that can be opened in any spreadsheet.</p>
      </li>
      <li>
        <p>When opened in a spreadsheet, the data will appear in 2 columns. The first columns contains the frequency, in MHz, from 1414 MHz to 1424 MHz. The second column is the signal.</p>
      </li>
      <li>
        <p>A graph of Signal vs. Frequency can easily be created after opening a file in a spreadsheet.</p>
      </li>
      <li>
        <p>The file name has a format that contains the date, time, location, azimuth, and elevation, with “_spectrum” at the end. The location, azimuth, and elevation are recorded with the values in the corresponding fields on the spectrometer inferface screen.</p>
      </li>
      <li>
        <p>As an example, the filename <font size="1">“2020-07-15_Morgantown_200_30_spectrum”</font>  contains data that was collected on July 15, 2020 in Morgantown with the telescope pointed at an azimuth of 200 degrees and an elevation of 30 degrees.</p>
      </li>
    </ul>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornOperation_runningSpectrometer</guid>
                <description>
                    
                    Steps on running spectrometer_w_cal.grc program in Gnuradio
                    
                </description>
                <pubDate>Sat, 25 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Horn Operation Tutorials</title>
                <link>http://localhost:4000/HornOperation_Tutorials</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://wvurail.org/dspira-lessons/HornOperation_Intro" class="button">Introduction to the horn telescope</a></p>

<p><a href="https://youtu.be/Oo28QCEZe_g" class="button">Setting up the horn telescope (video)</a></p>

<p><a href="https://wvurail.org/dspira-lessons/HornOperation_spectrometer_description" class="button">Description of the spectrometer program</a></p>

<p><a href="https://youtu.be/50B2Uv-SoDY" class="button">Description of the spectrometer program (video)</a></p>

<p><a href="https://wvurail.org/dspira-lessons/HornOperation_runningSpectrometer" class="button">How to run the spectrometer</a></p>

<p><a href="https://youtu.be/dWX0rRU99Z8" class="button">How to save data using the spectrometer (video)</a></p>

<p><a href="http://wvurail.org/dspira-lessons/HornOperation_Calibration" class="button">How to Calibrate the Horn Telescope (document &amp; video)</a></p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornOperation_Tutorials</guid>
                <description>
                    
                    Documents and videos explaining the operation of the horn telescope
                    
                </description>
                <pubDate>Sat, 25 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Building a Horn Telescope Overview</title>
                <link>http://localhost:4000/BuildingHornTelescope_Overview</link>
                <content:encoded>
                    <![CDATA[
                    <p>A list of the components that are needed to build and operate a horn radio telescope system is presented below. Links to documentation and instructional videos are provided where applicable.</p>

<h3 id="whats-needed-for-a-complete-horn-telescope-system">What’s Needed for a Complete Horn Telescope System</h3>
<ul>
  <li>
    <p>the horn &amp; antenna assembly – details provided <a href="https://drive.google.com/file/d/1qdc5lhKErFyIsc8b52ZIkCPJLi-XykSb/view?usp=sharing">here</a></p>

    <ul>
      <li>the horn</li>
      <li>the antenna can</li>
      <li>the antenna probe</li>
      <li>the antenna feedthrough</li>
      <li>the horn support stand</li>
    </ul>
  </li>
  <li>
    <p>a low noise amplifier (LNA)
  All of these will work. The DSPIRA LNA is the most stable and long lasting.</p>

    <ul>
      <li>Best option: the DSPIRA LNA – see information and instructions [link]</li>
      <li>Next best option: <a href="https://www.nooelec.com/store/sdr/sdr-addons/sawbird-h1.html">Nooelec SAWbird+ H1</a> - Premium SAW Filter &amp; Cascaded Ultra-Low Noise Amplifier (LNA) Module for Hydrogen Line (21cm) Applications</li>
      <li>Next best option: <a href="https://www.tindie.com/products/gpio/radio-astronomy-hydrogen-line-low-noise-amplifier/">Radio Astronomy Hydrogen Line Low Noise Amplifier</a></li>
    </ul>
  </li>
  <li>
    <p>an Airspy Software Defined Radio: <a href="https://airspy.com/airspy-r2">Airspy R2</a></p>
  </li>
  <li>
    <p>coaxial cable with SMA connectors: from coaxrf.com, <a href="https://www.coaxrf.com/shop/1-rf-coaxial-cables/times-microwave-lmr195/sma-male-times-microwave-lmr195/lmr195-sma-male-to-sma-male-coaxial-rf-pigtail-cable-2/">LMR195 SMA MALE to SMA MALE Coaxial RF Pigtail Cable</a></p>
  </li>
  <li>
    <p>computer &amp; software needs</p>

    <ul>
      <li>
        <p>computer with a Linux (Ubuntu) operating system</p>

        <ul>
          <li>
            <p>install Gnuradio 3.8</p>
          </li>
          <li>
            <p>install the program <em>spectrometer_w_cal.grc</em> from the Github repository gr-radio_astro</p>
          </li>
        </ul>
      </li>
      <li>
        <p>computer with Windows operating system - the Gnuradio and spectrometer_w_cal.grc program can be run from a bootable flash drive</p>
      </li>
      <li>
        <p>computer with Mac operating system - the Gnuradio and spectrometer_w_cal.grc program can be run from a bootable flash drive</p>
      </li>
    </ul>
  </li>
</ul>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/BuildingHornTelescope_Overview</guid>
                <description>
                    
                    Overview of what's required for building a horn telescope
                    
                </description>
                <pubDate>Sat, 25 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>How Fast Are We Moving?</title>
                <link>http://localhost:4000/HowFastAreWeMoving</link>
                <content:encoded>
                    <![CDATA[
                    <p>This lesson is designed at three different levels.  Each is mainly after the students being able to determine the speed of the Earth around the Sun.</p>

<p><a href="https://drive.google.com/file/d/16kOIq_1x2TTggZz2ao1H7ypAyL5KdrFu/view?usp=sharing" class="button">Basic Version</a>
The Basic version gets to the point in the most direct way, still asking the students to search for some info on the Internet.</p>

<p><a href="https://drive.google.com/file/d/1LanYTHlZKrMlAsa0Ofu3uTW39kQYeUhb/view?usp=sharing" class="button">Advanced Version</a>
The Advanced version is asking the students to think a little bit more before searching for information in the Internet.  The outcome is the same.</p>

<p><a href="https://docs.google.com/document/d/15UM0xx6I1MEU0DSmq8ptyxpJwmIa3muMem8us5xnG0E/edit?usp=sharing" class="button">Physics Version</a>
Students already exposed to the Universal Law of Gravity and Circular Motion will be able to do this activity.</p>

<p><a href="https://docs.google.com/document/d/1wpvKYHrdWjpbbzHOWjYOjCK95BkYc4WE0pzj2UZ3auI/edit?usp=sharing" class="button">Teacher Notes</a></p>

<p>https://www.youtube.com/watch?v=uZ9iNsjyw7k&amp;feature=youtu.be</p>

<p>This video discusses common difficulties experienced during this activity in the past.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HowFastAreWeMoving</guid>
                <description>
                    
                    Exploring how fast we are moving in the Milky Way Galaxy
                    
                </description>
                <pubDate>Fri, 24 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Horn Telescope Spectrometer Description</title>
                <link>http://localhost:4000/HornOperation_spectrometer_description</link>
                <content:encoded>
                    <![CDATA[
                    <p>The program used to run the telescope is a Gnuradio program called <em>spectrometer_w_cal.grc</em>. It is available from the WVURAIL/gr-radio_astro repository in Github. The <em>spectrometer_w_cal.grc</em> program has several features to make data collection with the horn telescope user-friendly. Each feature on the display is described below.</p>

<p>Set up the horn and connect the LNA to the Airspy with a cable, and the Airspy to the computer USB.  Then open the spectrum_w_cal.grc program in Gnuradio. 
<a href="https://youtu.be/Oo28QCEZe_g">This video shows how to set up a horn and start the program.</a></p>

<p>You can also watch <a href="https://youtu.be/50B2Uv-SoDY">this video</a>, which describes these user interface features in detail.</p>

<h3 id="1-features-of-the-spectrum-tab"><strong>1.	Features of the <em>Spectrum</em> Tab</strong></h3>

<p><img src="/dspira-lessons/images/filtered_nocal.png" alt="spectrometer screen" /></p>

<ul>
  <li>
    <p><strong>Graphical Display</strong> Boxes:</p>

    <ul>
      <li>
        <p><strong>Spectrum</strong> graph – shows the signal vs. frequency spectrum, which is the primary focus of our investigations with a radio telescope.</p>
      </li>
      <li>
        <p><strong>System Heartbeat</strong> – This is actually a histogram of signals being detected. During normal, this display should continuously jump up and down during a run. As long as its “beating,” things are good. If this graph looks frozen, then the program has probably stopped running, and you will need to restart the program.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Spectrum Display</strong> options:</p>

    <ul>
      <li>
        <p><strong><em>filtered spectrum with no calibration</em></strong> - the raw spectrum collected is displayed with the noise spikes filtered out.</p>
      </li>
      <li>
        <p><strong><em>spectrum with calibration</em></strong> - the hot and cold calibrations are factored in to display the true signal received from the galaxy.</p>
      </li>
      <li>
        <p><strong><em>hot calibration</em></strong> - Select when pointing the telescope at the “hot” source (the ground) during the calibration procedure.</p>
      </li>
      <li>
        <p><strong><em>cold calibration</em></strong> - Select when pointing the telescope at the “hot” source (the ground) during the calibration procedure.</p>
      </li>
      <li>
        <p><strong><em>unfiltered spectrum with no calibration</em></strong> - the raw spectrum collected is displayed with no changes made to it.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Integration Time</strong> options:</p>

    <ul>
      <li>
        <p>Because the radio signals being detected are extremely weak, it is necessary for the software to add together (integrate) the signals detected over a period of time. This is the integration time. This averages out the noise in the signal, making the galaxy signal more prominent. The user has the option of setting two different integration times when using this spectrometer.</p>
      </li>
      <li>
        <p>The user can change these settings in the integration variable blocks before starting the program.</p>
      </li>
      <li><strong>Short Integration</strong>
        <ul>
          <li>
            <p>This is useful for quick sampling of what the telescope is looking at.</p>
          </li>
          <li>
            <p>The default setting for the shorter integration time is 0.4 s.</p>
          </li>
        </ul>
      </li>
      <li><strong>Long Integration</strong>
        <ul>
          <li>
            <p>This is useful for when smoother data is desired. Usually the user will use the longer setting for targeted pointings where “good” data is needed.</p>
          </li>
          <li>
            <p>The default setting for the longer integration time is 10 s.</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Integration Reset</strong> – This resets the data averaging when the long integration time is selected. This is needed if the telescope pointing is changed in the middle of a long integration to assure the spectrum displayed is the average of the new pointing.</p>
  </li>
  <li>
    <p><strong>Full or Clipped Spectrum</strong></p>

    <ul>
      <li>
        <p><strong>Clipped spectrum</strong> – In this display the ends of the spectrum, between 1414 and 1415 MHz and between 1423 and 1424 MHz, are clipped off. This removes the distracting background portions of the spectrum, as discussed in the <em>The System Background Signal</em> in the <a href="http://wvurail.org/dspira-lessons/HornOperation_Intro">What Can a Horn Telescope Measure?</a> post.</p>
      </li>
      <li>
        <p><strong>Full spectrum</strong> – This is self explanatory.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Capture Current Spectrum</strong> button</p>

    <ul>
      <li>The live spectrum being displayed on the main graph can be captured in a .csv text file for easy access later.</li>
    </ul>
  </li>
  <li>
    <p><strong>Write to .csv File</strong></p>

    <ul>
      <li>
        <p>This option enables the spectrum to be written to newly created files once every integration time so that data can be collected without the user’s presence.</p>
      </li>
      <li>
        <p>See the video <a href="link">Saving Data Using the <em>spectrometer_w_cal.grc</em> Program</a>.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-features-of-the-system-tempgain-tab"><strong>2.	Features of the <em>System Temp/Gain</em> Tab</strong></h3>

<p><img src="/dspira-lessons/images/sys_T&amp;G.png" alt="System Temp/Gain screen" /></p>

<ul>
  <li>
    <p>These graphs are not needed during most telescope runs. They are mainly for those who are interested in the quantitative performance of the telescope.</p>
  </li>
  <li>
    <p><strong>System Temperature Spectrum</strong> – This graph is an indication of the amount of signal that is coming from the telescope system itself.</p>
  </li>
  <li>
    <p><strong>Gain</strong> – This is the factor that is used by the spectrometer to scale the detected signal into known astronomical units.</p>
  </li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornOperation_spectrometer_description</guid>
                <description>
                    
                    Description of the spectrometer_w_cal.grc program features
                    
                </description>
                <pubDate>Fri, 24 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>What Can a Horn Telescope Measure?</title>
                <link>http://localhost:4000/HornOperation_Intro</link>
                <content:encoded>
                    <![CDATA[
                    <h3 id="the-horn-telescope-an-overview">The Horn Telescope: An Overview</h3>

<p>A horn telescope is simply an antenna designed to pick up radio waves. The horn used in DSPIRA is specifically designed to pick up radio waves emitted by neutral hydrogen atoms in the Milky Way Galaxy, which have a frequency of approximately 1420 MHz. 
Because it is an antenna, a horn telescope will pick up all radio waves that are incident on it, regardless of their origin. As a result, the signal that is displayed on the spectrometer output includes signals from outer space as well as those from the local environment here on earth. Some of these signals are inherent in the data processing system.</p>

<p>Because we are primarily interested in signals that are coming from astronomical objects, such as the galaxy, we need to subtract out any any other signals that the telescope might be picking up. The spectrum_w_cal.grc Gnuradio program enables the user to do just that so that we can view spectra of signals that are only from the astronomical object of interest.</p>

<h3 id="what-can-a-horn-telescope-measure">What Can a Horn Telescope Measure?</h3>

<p>The graph below shows a typical spectrum of radio waves from neutral hydrogen detected using the DSPIRA spectrometer program with a horn.</p>

<p><img src="/dspira-lessons/images/Sample_spectrum.png" alt="sample spectrum" /></p>

<p>This graph displays the amplitude of radio wave signals collected as the spectrometer scans across frequencies ranging from 1414 MHz to 1424 MHz. The neutral hydrogen signal appears at approximately 1420.4 MHz.</p>

<p>So what are the features appearing in this graph?</p>

<h4 id="the-system-background-signal">The System Background Signal</h4>

<p>As mentioned above, part of the signal displayed in the graph is from sources that are not from the galaxy. This can be from noise sources in the local environment as well as signals from the horn detector system itself. The part of the signal that comes from the horn system itself, which includes the electronics and data signal processing, is highlighted in red in the graph below, which is typical for the Airspy software defined radio device used with the DSPIRA telescope.</p>

<p><img src="/dspira-lessons/images/Sample_spectrum_Fig2.png" alt="spectrum background" /></p>

<p>If the telescope is pointed in many different directions, such as different parts of the sky, at the ground, at a building or a tree, the viewer will notice that the characteristic feature highlighted in the spectrum above does not change in shape. For stronger signals, the height of the graph will increase, but this general background shape is always there. This is a result of the data signal processing electronics of the telescope system.</p>

<p>Another feature that typically appears with the Airspy SDR we use is the single line spike that appears at 1420.0 MHz. This comes from the Airspy electronics and is not of interest to us.</p>

<p>The <em>spectrometer_w_cal.grc</em> spectrometer program is designed with the capability of reducing noise spikes and subtracting out the characteristic background signal. This allows the user to display the spectrum of signals that come from only the galaxy.</p>

<h4 id="the-signal-from-neutral-hydrogen">The Signal from Neutral Hydrogen</h4>

<p>For spectral line viewing, the peak that we are interested in is the small peak that may appear at a frequency of approximately 1420.4 MHz. This is the peak identified in the spectrum below.</p>

<p><img src="/dspira-lessons/images/HornIntro_Fig3.png" alt="spectrum HI peak" /></p>

<p>This 1420.4 MHz signal is from radio waves detected from neutral hydrogen atoms in our galaxy. These radio waves are emitted from these hydrogen atoms as a result of a transition that takes place with the electrons in the atoms. The signal emitted from each atom is extremely weak. Fortunately there is a very large amount of neutral hydrogen in our galaxy; so we are able to detect this hydrogen with our radio telescope here on earth. We cannot see these hydrogen atoms directly with the naked eye. This is where the horn radio telescope becomes useful!</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/HornOperation_Intro</guid>
                <description>
                    
                    An overview of what a horn telescope detects
                    
                </description>
                <pubDate>Fri, 24 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Astronomy Activity : Understanding Celestial Coordinate Systems</title>
                <link>http://localhost:4000/A2UnderstandingCeleCoords</link>
                <content:encoded>
                    <![CDATA[
                    <p><a href="https://docs.google.com/document/d/1hlc1SBIF0k_CGa8UhYB3Bi1jVJp1-mBKM7ouzOqZ1gY/edit?usp=sharing" class="button">Student Activity Document</a></p>

<p><a href="https://docs.google.com/document/d/1JVFn5d4mhCN-fU2JmSMRD95g3N5xwSbFM94TUpAUe3k/edit?usp=sharing" class="button">Teacher Notes</a></p>

<p>The following are videos from Dr. Loren Anderson from West Virginia University’s Astronomy department.<br />
They are short clips from the his 2nd lecture given to the DSPIRA Teachers during July 2019.</p>

<h3 id="intro-to-motion-in-the-sky">Intro to Motion in the Sky</h3>

<p>https://www.youtube.com/watch?v=wUNDoUoDrCg</p>

<h3 id="the-celestial-sphere">The Celestial Sphere</h3>

<p>https://www.youtube.com/watch?v=d8BcwK5nlos</p>

<h3 id="earths-motion-and-star-trails">Earth’s Motion and Star Trails</h3>

<p>https://www.youtube.com/watch?v=_L1R1VnMeD4</p>

<h3 id="more-celestial-sphere">More Celestial Sphere</h3>

<p>https://www.youtube.com/watch?v=UpYt7238p5g</p>

<h3 id="discussion-of-common-misconceptions">Discussion of Common Misconceptions</h3>

<p>https://www.youtube.com/watch?v=nfonuosoHUk</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/A2UnderstandingCeleCoords</guid>
                <description>
                    
                    A quick introduction to different coordinate systems used in astronomy
                    
                </description>
                <pubDate>Thu, 23 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Measuring the Earth's Speed around the Sun</title>
                <link>http://localhost:4000/EarthAroundSun</link>
                <content:encoded>
                    <![CDATA[
                    <p>This is a fairly intense sequence of activities for High School+ level students with the goal of eventually taking measurements with the DSPIRA Radio Horn Telescope to determine the Earths Speed around the Sun. The reference point to measure this speed with be the Center of the Galaxy (GC).</p>
<h3 id="click-here-for-a-complete-document-of-teachers-notes-for-this-whole-activity-sequence">Click here for a complete document of <a href="https://docs.google.com/document/d/10zVMqpykbRbOjKvXGvWoZxYcacZ31Ay5AIp2mx70VOk/edit?usp=sharing">Teacher’s Notes</a> for this whole activity sequence</h3>

<p>There are (up to) 6 activities to get to using the Horn Telescope</p>

<p><strong><em>Activity List</em></strong></p>
<ol>
  <li>How Fast Are We Moving?</li>
  <li>Modeling Earth’s Motion Around the Sun</li>
  <li>Earth’s Motion With Respect to Galactic Center</li>
  <li>A teacher created Doppler Effect Lesson -(Currently, no DSPIRA Activity here)</li>
  <li>Analyzing DSPIRA Radio Horn Data</li>
  <li>Comparing Model to Data</li>
  <li>Getting your own data with your Radio Horn</li>
</ol>

<h2 id="1-how-fast-are-we-moving">1. How Fast Are We Moving?</h2>
<p>This activity is a stand alone activity that is a good simple exercise for students from general middle school space science up to high school physics students
   to determine the speed of the Earth’s rotation, revolution around the Sun, and the Sun’s speed around the Galaxy.</p>
<h6 id="to-get-to-the-activity-files-click-here-how-fast-are-we-moving">&gt;To get to the activity files, click here <a href="http://wvurail.org/dspira-lessons/HowFastAreWeMoving">How Fast Are We Moving?</a></h6>

<h2 id="2-modeling-earths-motion-around-the-sun">2. Modeling Earth’s Motion around the Sun</h2>
<p>The Earth will be modeled as moving in a circle around the Sun.  The direction to the Center of the Galaxy(GC) is also included becuase it will eventually be needed for the 
   measurements.  Since the amount of the Earth’s motion towards the GC is eventually needed for Doppler considerations, a graphical approach to velocity vector components is 
   used here.</p>
<h6 id="-click-here-for-student-activity-document">&gt; Click here for Student Activity <a href="https://docs.google.com/document/d/1__n0TklTs-efhsMBp2iGLFbOOSoBRgllJImWqw3vCNQ/edit?usp=sharing">Document</a></h6>
<h6 id="-click-here-for-student-activity-diagram">&gt; Click here for Student Activity <a href="https://drive.google.com/file/d/1AZH7kvTEcVaMl58jet1LkjiGaGwPlmJs/view?usp=sharing">Diagram</a></h6>

<h6 id="-teacher-hint-video-for-activity">&gt; <a href="https://www.youtube.com/watch?v=ke65AuJ-j7I&amp;feature=youtu.be">Teacher Hint</a> Video for Activity</h6>

<h2 id="3-earths-motion-with-respect-to-the-galactic-center">3. Earth’s Motion with respect to the Galactic Center</h2>
<p>The Earth’s Orbit Model generated in the last activity is fine, but the Day #’s in the activity need to be tagged to an actual calandar date.  This activity uses the online 
planetarium program <a href="https://stellarium-web.org/">Stellarium Web Online</a> to help connect the calendar to the student’s model they created.</p>

<h6 id="-click-here-for-student-activity-document-1">&gt; Click here for Student Activity <a href="https://docs.google.com/document/d/16ibpadOhBioZqrvxWpdrwJ1S6iNAwi7YaRW_QoM-CVI/edit?usp=sharing">Document</a></h6>

<h6 id="-teacher-hint-video-for-activity-1">&gt; <a href="https://www.youtube.com/watch?v=ApKA6kWlFuQ&amp;feature=youtu.be">Teacher Hint</a> Video for Activity</h6>
<h4 id="stellarium---web-vs-download-version">Stellarium - Web vs Download Version</h4>
<p>Stellarium is a great application for anyone wishing to look at the night sky, or for teachers wanting students to learn about the sky through an interactive experience.<br />
If you get into the full DSPIRA Experience with making and using a Radio Horn Telescope, you would probably want to take the longer learning path to the more robust environment of the downloadable version (still currently free).  Watch the video for a DSPIRA opinion on Pros and Cons for each version.</p>

<h6 id="-video-stellarium-web-vs-download-version">&gt; Video <a href="https://www.youtube.com/watch?v=uWdVQG93MO4&amp;list=PLxSg3s3C3JCFns9MFgZ-1VWBV4Y346afq&amp;index=5&amp;t=0s">Stellarium Web vs Download version</a></h6>

<h2 id="4-introduction-to-doppler-effect">4. Introduction to Doppler Effect</h2>
<p>There is not a DSPIRA generated activity for Doppler.  The next activity will require using the Doppler equation given in the activity, but the students should be 
exposed to it first through a teacher generated lecture.<br />
Here is a quick 3 minute video that introduces the Doppler Shift, and in the last minute, it discusses how astronomers use it to detect motion.</p>
<h6 id="-popular-youtube-doppler-shift-video">&gt; <a href="https://www.youtube.com/watch?v=h4OnBYrbCjY">Popular Youtube Doppler Shift Video</a></h6>

<h2 id="5-measuring-the-earths-speed-around-the-sun">5. Measuring the Earth’s Speed around the Sun</h2>
<p>Actual data generated from the DSPIRA Radio Horn Telescope is given to the students to analyze.  It is a great opportunity for students to learn to dig information out of a graph.  The data lines up with the points created in the Earth Orbit Model from activity #2.  The students will use the Doppler equation to determine the (radial) speed of the Earth towards the Galactic Center.</p>

<h6 id="-click-here-for-student-activity-document-2">&gt; Click here for Student Activity <a href="https://drive.google.com/file/d/17vAWar6qnTkrmAbeuVLDPLYGMwrpnj2J/view?usp=sharing">Document</a></h6>

<p>The following video shows an example of how to analyze the Spectrum in the manner of the activity.  It can help the teacher or student get started with the analysis part of the activity.</p>
<h6 id="-video-of-graph-analysis-example">&gt; Video of <a href="https://www.youtube.com/watch?v=0yAo1z4kv1w">Graph Analysis Example</a></h6>

<h2 id="6-comparing-the-earth-orbit-model-to-the-actual-data-analysis">6. Comparing the Earth Orbit Model to the actual Data Analysis</h2>

<p>There has been a long sequence of activities that brings a class to this point.  This is actually a quick activity to direct the students to take all the work they have done so far and put it into one Conclusion/Final Comparison chart.</p>

<h6 id="-click-here-for-student-activity-document-3">&gt; Click here for Student Activity <a href="https://drive.google.com/file/d/1Xum-03ijXDn8iplFXZ7dhKvmLEAxcuZu/view?usp=sharing">Document</a></h6>
<p>If each student truly has done their own work throuhg this process, they will all have slightly different values (for the skew between velocity of model and actual data)<br />
This is an opportunity to gather the whole class data and discuss the results.  Here is a spreadsheet that a teacher can open, then make a copy that they can allow the students to share and enter the data.  Their data on the spreadsheet has typically yielded a nice histogram.  This allows the students, and you the teacher, to quickly assess how an individual student’s results compare to the rest of the class.  There is an example worksheet (lower tabs) to look at once the spreadsheet is open.</p>

<h6 id="-click-here-class-data-spreadsheet">&gt; Click here <a href="https://docs.google.com/spreadsheets/d/1mQxOA6Tcwsas5Y0UEpoiRx85zhIqMMff7jumb62Mfno/edit?usp=sharing">Class Data Spreadsheet</a></h6>

<h2 id="7-students-gathering-data">7. Students Gathering Data</h2>

<p>If you have a DSPIRA Radio Horn Telescope and the electronic means to use it, then there is an opportunity to have the students gather actual data from the Center of the Galaxy and run their own spectrum through the same set of analysis that was done in this activity sequence (namely, acitivities 2, 5, and 6)</p>

<p><img src="/dspira-lessons/images/Students_Obs_GC.png" alt="Students Observing the Galactic Center with a Radio Horn" /></p>

<h6 id="students-observing-the-galactic-center-with-a-radio-horn">*Students Observing the Galactic Center with a Radio Horn</h6>

<p>Video coming soon! How to go from choosing an object to observe to actually setting up the Horn Telescope and making the Observations</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/EarthAroundSun</guid>
                <description>
                    
                    This is a multi-activity lesson leading towards measuring the Speed of the Earth around the Sun
                    
                </description>
                <pubDate>Wed, 22 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>The Milky Way Galaxy</title>
                <link>http://localhost:4000/Astro_MWG</link>
                <content:encoded>
                    <![CDATA[
                    <p><img src="/dspira-lessons/images/DspiraGalaxyPic2019.jpg" alt="&quot;DSPIRA Group July 2019, Green Bank, WV&quot;" /></p>
<h6 id="dspira-summer-session---july-2019---green-bank-west-virginia"><em>DSPIRA Summer Session - July 2019 - Green Bank, West Virginia</em></h6>

<p>At the heart of the DSPIRA Experience is the development of the Radio Horn Telescope. It is truly amazing that we can built a low cost device that can reveals secrets from Radio Waves in space.  However, like a starter telescope purchased at a department store can’t see all the wonders that the Hubble Space Telescope can, the DSPIRA Horn Telescope will only be able to detect the brightest radio sources.</p>

<p>It turns that the brightest radio source is the Milky Way Galaxy, and that is what the DSPIRA Horn Telescope will be detecting, so this little activity/lesson sequence will introduce the Milky Way and lead us to what the radio waves will reveal.</p>

<h3 id="click-here-for-a-complete-document-of-teachers-notes-for-this-whole-activity-sequence">Click here for a complete document of <a href="https://docs.google.com/document/d/1kXJ99gTiLGk551XCP7-ygE7T5rd5aw0Yu3gccNCzsdc/edit?usp=sharing">Teacher’s Notes</a> for this whole activity sequence</h3>

<p><strong><em>Activity List</em></strong></p>
<ol>
  <li>How Fast Are We Moving?</li>
  <li>Celestial Coordinate Systems</li>
  <li>Using Stellarium to Find the Galactic Center</li>
  <li>Introduction to the Milky Way - What can we see?</li>
  <li>Introduction to the Milky Way - What CAN’T we see?</li>
  <li>A Model of the Motion within the Milky Way</li>
  <li>Creating a Velocity Curve for the Milky Way Galaxy</li>
</ol>

<h2 id="1-how-fast-are-we-moving">1. How Fast Are We Moving?</h2>

<p>This activity may have already been done as a stand alone, or as part of the Earth’s Motion sequence. It does have the students determine the speed of the Sun around the Milky Way, so they can do it now, or recall the value from earlier work.</p>

<h6 id="-click-for-link-to-how-fast-are-we-moving-page">&gt; Click for link to <a href="http://wvurail.org/dspira-lessons/HowFastAreWeMoving">How Fast Are We Moving?</a> page</h6>

<h2 id="2-understanding-celestial-coordinate-systems">2. Understanding Celestial Coordinate Systems</h2>

<p>If the students are heading towards making observations from their location, a basic lesson of coordinate systems is needed.  Galactic Coordinates are covered here.</p>

<p>This, too, is a separate stand alone lesson within this DSPIRA space.</p>

<h6 id="-click-for-link-to-understanding-celestial-coordinates-page">&gt; Click for link to <a href="https://wvurail.org//dspira-lessons/A2UnderstandingCeleCoords">Understanding Celestial Coordinates</a> page</h6>

<h2 id="3-using-stellarium-to-find-the-galactic-center">3. Using Stellarium to Find the Galactic Center</h2>

<p>This is more closely related to the Earth Motion Lesson sequence, but would be a good starter for making observations in the sky.</p>

<p><strong>STELLARIUM NOTE:</strong> First off, Stellarium is not the only planetarium software available, but it is the one that was used with the DSPIRA Teacher program, and the one being utilized with these activities.<br />
<strong>USE DOWNLOAD VERSION</strong> If you are at this point investigating the Milky Way with the Horn Telescope (or at least heading in that direction) You should have a few versions downloaded on computers you intend on using. It will make the student’s observation planning much easier.</p>

<p><em>Video (to be created) - Planning for a Horn Telescope Observation - From choosing an object to pointing the Horn at it</em></p>

<h6 id="-click-here-for-student-activity-document">&gt; Click here for Student Activity <a href="https://docs.google.com/document/d/16ibpadOhBioZqrvxWpdrwJ1S6iNAwi7YaRW_QoM-CVI/view?usp=sharing">Document</a></h6>

<h2 id="4-introduction-to-the-milky-way---what-can-we-see">4. Introduction to the Milky Way - What can we see?</h2>

<p>Just a basic chance for the students to get basic information about the Milky Way off the internet. There is also a first pass at understanding the Galactic Coordinate system used for studying the Milky Way.</p>

<h6 id="-click-here-for-student-activity-document-1">&gt; Click here for Student Activity <a href="https://drive.google.com/file/d/1T441BW8rz3_bVgKN_bKK-ivfudXhQwFa/view?usp=sharing">Document</a></h6>

<h2 id="5-introduction-to-the-milky-way---what-cant-we-see">5. Introduction to the Milky Way - What CAN’T we see?</h2>

<p>The name is hopefully not misleading, because there is lots that we can’t see.  This activity looks at MOTION as “the thing we can’t see” (without understanding the <a href="https://www.youtube.com/watch?v=h4OnBYrbCjY">Doppler Effect</a>)</p>

<h6 id="-click-here-for-student-activity-document-2">&gt; Click here for Student Activity <a href="https://drive.google.com/file/d/1xPjeHIYgnBoz7Gs0A-shC9hNVgdAPxlF/view?usp=sharing">Document</a></h6>

<h6 id="-computer-simulation-of-galactic-motion">&gt; <a href="https://www.youtube.com/watch?v=GLiXR0Jh3o8">Computer Simulation of Galactic Motion</a></h6>

<h2 id="6-modeling-the-motion-of-the-milky-way">6. Modeling the Motion of the Milky Way</h2>

<p>This is a paper model that allows the students to determine relative radial speeds of stars at locations around the Milky Way Galaxy.  A collaborative class effort can produce a model very similar to current research in Milky Way Astronomy</p>

<h6 id="-click-here-for-all-3-student-documents">&gt; Click here for all 3 Student documents</h6>
<h6 id="-document">—–&gt; <a href="https://drive.google.com/file/d/1TKCevAKtUIFev0SgQoPPxSa87RVd7KmC/view?usp=sharing">Document</a></h6>
<h6 id="-spreadsheet">—–&gt; <a href="https://docs.google.com/spreadsheets/d/1gwL3GSYX-_zK7E2O1va8yNV41vwuRpVm2QRopB4B5TM/edit?usp=sharing">Spreadsheet</a></h6>
<h6 id="-model-diagram">—–&gt; <a href="https://drive.google.com/file/d/10Ct0UIcqEZzKVll40bz1z-7tCSWLWcfV/view?usp=sharing">Model Diagram</a></h6>

<h6 id="here-are-3-helpful-video-companions">Here are 3 helpful video companions</h6>
<p><a href="https://www.youtube.com/watch?v=sZTpAqn1St4" class="button">MWG Model - Part 1</a><a href="https://www.youtube.com/watch?v=kyww_Vu5AZc" class="button">MWG Model - Part 2</a><a href="https://www.youtube.com/watch?v=Vf4a7fKUWGE" class="button">MWG Model - Part 3</a></p>

<h2 id="7-creating-a-velocity-curve-for-the-milky-way-galaxy">7. Creating a Velocity Curve for the Milky Way Galaxy</h2>
<p>This is a culminating activity that the teachers and students can take on collecting data of the galaxy… If you go back to the Lesson Module Page, there is a complete other lesson sequence to accomplish this.</p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/Astro_MWG</guid>
                <description>
                    
                    The Radio Horn works best with the Milky Way, so let's learn about it
                    
                </description>
                <pubDate>Tue, 21 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
        
            <item>
                <title>Determining a Velocity Curve of the Milky Way Galaxy</title>
                <link>http://localhost:4000/Astronomy_VelocityCurve_Overview</link>
                <content:encoded>
                    <![CDATA[
                    <p><strong>OVERVIEW FOR THE TEACHER</strong></p>

<ul>
  <li>
    <p><strong>Level:</strong> HS Advanced, College</p>
  </li>
  <li>
    <p><strong>Objective:</strong>  In this sequence of activities, using a horn telescope, the students will take measurements of HI spectra along the galactic plane of the Milky Way Galaxy. From their observations of galactic quadrants II &amp; III the students will be able to deduce that the MWG is rotating. From their observations of galactic quadrant I the students will be able to determine a velocity curve of the MWG and compare it to expected curves for different galactic mass distributions.</p>
  </li>
  <li>
    <p><strong>Pre-Knowledge of Students:</strong></p>

    <ul>
      <li>
        <p>The students have been exposed to the horn telescope and understand how to read a spectrum.</p>
      </li>
      <li>
        <p>The students understand what radio waves are, and they understand that the spin-flip in hydrogen atoms is the source of the 21-cm waves detected by the horn telescope.</p>
      </li>
      <li>
        <p>The students understand how to apply the Doppler shift to the spectrum peaks in order to find the relative velocity of the detected hydrogen.</p>
      </li>
      <li>
        <p>The students understand trigonometry.</p>
      </li>
      <li>
        <p>The students understand relative velocity.</p>
      </li>
      <li>
        <p>The students understand Newton’s law of gravitation and can relate it to the orbital motion of satellites.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Key Terms:</strong>  horn telescope, HI spectrum, galactic coordinates, Horizontal Coordinates, Stellarium, Doppler Shift, red shift, blue shift, relative velocity, circular motion, law of gravitation, orbital motion</p>
  </li>
  <li>
    <p><strong>Related Videos for Teacher:</strong> <a href="https://youtu.be/tDCPp8RIM4g">Galaxy Survey Trailer</a></p>
  </li>
  <li><strong>Teacher Preparation:</strong>
    <ul>
      <li>
        <p>This activity can be done with a single horn shared with the class, or with multiple horns assigned to groups of students.</p>
      </li>
      <li>The students have used a horn telescope before. It is recommended that the following lessons have been completed:
        <ul>
          <li>
            <p>Intro to the Horn Telescope</p>
          </li>
          <li>
            <p>Electromagnetic Spectrum</p>
          </li>
          <li>
            <p>The 21 cm Wavelength of Neutral Hydrogen</p>
          </li>
          <li>
            <p>Understanding Coordinate Systems</p>
          </li>
        </ul>
      </li>
      <li>
        <p>The teacher should be familiar with the implications of red-shifted and blue-shifted signals, and understand that the general trend of blue-shifted peaks from quadrant II and red-shifted peaks from quadrant III imply that the galaxy rotates in a CW sense in reference to standard galactic coordinates.</p>
      </li>
      <li>The teacher should be familiar with the tangent method and how the motion of an object toward the sun along a tangent is related to the galactic distances and angles involved. See the Teacher Notes under Part 2: Galactic Quadrant I Observation.</li>
    </ul>
  </li>
  <li>
    <p><strong>Sequence of activities:</strong> - The Teacher Notes for each part provide more details.</p>

    <ol>
      <li>
        <p>The students collect spectra at different galactic longitudes along the galactic plane in quadrants II and III.</p>

        <p>a. The student analyze the spectra to determine the relative velocity of the detected hydrogen.</p>

        <p>b. The students determine that the galaxy is rotating.</p>
      </li>
      <li>
        <p>The students then collect spectra at different galactic longitudes along the galactic plane in quadrant I.</p>

        <p>a. Assuming circular motion of the galaxy, the speed of the tangent point along the observation line is calculated.</p>

        <p>b. A graph showing galactic speed vs distance from the galactic center is created using these results.</p>

        <p>c. This graph is compared to the graph expected in different models of mass distribution in the galaxy.</p>
      </li>
    </ol>
  </li>
</ul>

<h3 id="part-1-galactic-quadrants-ii--iii-observation">Part 1: Galactic Quadrants II &amp; III Observation</h3>

<p>OBJECTIVE: In this activity, the students collect spectra of the MWG along the galactic plane in quadrants II &amp; III. From these they should be able to deduce that the MWG is rotating and the direction of rotation.</p>

<p><a href="https://docs.google.com/document/d/1h9is9YnnfDidLnlvs-DnXlyzXIjT0EhrLDdnONAByHg/edit?usp=sharing" class="button">Teacher Notes for Part 1</a></p>

<p><a href="https://docs.google.com/document/d/1jcMV-8X8Cd7rryGCsednTlc0fFRrgvAGkFyJUQAGJh8/edit?usp=sharing" class="button">Student Handout for Part 1 Observation</a></p>

<p><a href="https://docs.google.com/document/d/1aVUFzAvC14gPeV6RSYumYPlkclgILeoaI5LpUZNSV5U/edit?usp=sharing" class="button">Student Handout for Part 1 Analysis &amp; Interpretation</a></p>

<h3 id="part-2-galactic-quadrant-i-observation">Part 2: Galactic Quadrant I Observation</h3>

<p>OBJECTIVE: In this activity, the students collect spectra of the MWG along the galactic plane in quadrant I. The students will determine the speeds of the most red-shifted part of the spectra, and then apply the tangent method to determine the galaxy’s velocity as a function of distance from the galactic center.</p>

<p><a href="https://docs.google.com/document/d/1BSLoZjrFtA2qEoVzgvXjHdufQFRWmxtQWSAl8k1yJu8/edit?usp=sharing" class="button">Teacher Notes for Part 2</a></p>

<p><a href="https://docs.google.com/document/d/1V4wUx8VtX358x-gIWdH9FaYi3579bz_Unl38_ShrbKE/edit?usp=sharing" class="button">Student Handout for Part 2 Observation</a></p>

<p><a href="https://docs.google.com/document/d/1J9w1DH5fQW24XDvesYTzsR943Px_13uTZQQS5qi6rxg/edit?usp=sharing" class="button">Student Handout for Part 2 Analysis &amp; Interpretation</a></p>


                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/Astronomy_VelocityCurve_Overview</guid>
                <description>
                    
                    Instructions and handouts for determining a velocity curve of the MWG
                    
                </description>
                <pubDate>Sun, 19 Jul 2020 00:00:00 -0400</pubDate>
                <author>Pranav Sanghavi</author>
            </item>
        
    
  </channel>
</rss>
